;; This file was generated by the `with-cache` library on 2018-05-06
((("1f4f892ae5864cb9cb2d55e1613fbb07" "0b98dc608a157fcfe304878a5a5043bb" "3679a0738122448e8daf0c9eafc89f91" "782c6f5a9ce20a9d271fd432990c19c6" "61af13cc4a07f7d2b5ebe16028ecf4bc" "ce8ec90c89db77f0c52fe0d2ece65a64" "60c1e64d89b6852de227fa59b1cc92b5" "42665fa3cff42c518fe7cb0e3d4576fc" "eb0456e1915137d016493762818e73fb" "b2c291402723927f81d77ce4f8da43cf" "3bf06091e1523c270e072ce1fca519d0" "1edffba2e68d4e85aa5e4d0aa768cf99" "a56fc2541198374d62e28378e35ca79f" "45f7338f56b0f0b48d433ea428a1791f" "aab8e659e3fd299e8c539fbd96091334" "890c361e0080da94be48971584983709" "ef65d54dad42b9ba8a8231f96448be1d" "8b1d2959e1ac99f65f8a4fa816d51730" "c56acb07ccaaa4802213ddd84a7eb512" "0bae9c96bb5ec235cfce93eeef46b644" "b7b1b9309e4a4176054081c874657872" "9b087c49396076a44070dcd0698a38d7" "c74e1be730228a38128faf08548fe0c2" "3118b0175b19499d67c210884e0b6b38" "4ed08b32a1facf16b26da0f272d31c9b" "04e5145c0b3cd05c9fad3a66b6de2896" "f161cfd75d65d0f12522580c3b278920" "a7455cf3f15be85d2afd283911a847e0" "e9fd07f665834e6f9f95b10bfa08f290" "7d6bb1ebaaaa481e3358d1536782f1f9" "08e3634ee36bda43d52d2103672023bd" "8ebfe80ff58d6e2df3833ae46caaa4a5" "f5969b33873b39010f18948785404734" "1565869d32079cc5194d8c637b6f4d50" "81d6e2a22f5ae9e6487bd00c84166331" "219e6b1c8b3e121f0ec53d3703e9da80" "dbebba2e262959e32f2ceb953caf089c" "0cd65919373f06e6da8a5c234d00778c" "0bc2bf9b2f1933282757cf2feeea1c7c" "56d2771f171c33677473fab1f2d27beb" "9d08d6b0c5b4c18f8a8c2d710d7e3ad0" "d80d041d158ff83d5054064f170df476" "0bc2bf9b2f1933282757cf2feeea1c7c" "012c83b09860fc94dce252fffd22e096" "bd3ff1c2b14afcee919d909a85e937d3" "0cd65919373f06e6da8a5c234d00778c" "d6bc9acec42f0e67074e49de1013c274" "56d2771f171c33677473fab1f2d27beb" "9d08d6b0c5b4c18f8a8c2d710d7e3ad0" "56e143a9a13986c7f8a73fca6abffdb5" "d087426693620dc0821c3cf7b8d48f7c" "b1dcb63ddfdc726d660602e1539ec590" "89a960d0771bf6c6baf2fc0cfbb2e07a" "cb7ee3dffb467d18a13ed548da57b0b8" "32d2c8d26e78ec6863223ca440b0a88e" "1105848997b3cbb34da1a52b317f69d2" "80d632125cba2454d16b71329e28f5d4" "9093ba490b74de39aebd5018978dee74" "6e4c3ce7a29e83b4bcc155f1d46f87c7" "3ac1b7c8b90d26d80dc668a413e69cf2" "0e5f3cfa69358cd3c0804fdb0a6ed001" "6b3180c268eacc50f35cde8c80c8f2c8" "c326d386cc8d45b94ac28b75544a14bf" "c2fd866de6c4140b0153334f5a8f2886" "e5529878b0554412347069bd81485101" "9bf7a2c1b3cd8b53a31f89a5f2fd3cba" "0cd970159034d5436fea41c4ba54a9bb" "4997f965aa210d508f3a5e600d27abac" "e3cfc2e8a45c34e2cdf320a4b2bb57ea" "592213e81a84981d3563985abc699325" "6b67a26d77f36e4bf25f1758c597f0e4" "bb23bb99d1d1eaa150b025658afac352" "92eb9d3bced9c2ea2fe78407f04e8520" "e9051079b80e50cc8d24ca99037f8b5d" "f742b80b5af523cc902a3f0516df4572" "c64fb78b4db1e5b682e5f5e891efe426" "e50fc198d4dd1654d5db2f3bc434c738" "48ffc173a1d39a881851ee809a7ddf65" "22005bd3d275f9d0b5c486e88f38a87c" "2f2f99dc3786ab015130bdefa177b694" "98c24644fbcee9272dce8b31dbc1d7a1" "4f8bc18b4ebb576c2915756752de1e92" "442a7f673c00e50e3bdf6252d01a98ab" "9997ea1ca634643fd56384fd48aafc45" "cb4e40f78f41fa5b6c93fb8e565ec5e7" "8aa73f27f156b0481981f2c555b70e1a" "5cd98108b155ad7f9ddaf113bc88babf" "e333a5a1a64b21362cbd16eaae5a319f" "2ae2c40a31b36c919eba80770f6133a4" "c7d731926d71b58425dbcb85f3710fff" "4410bb2eb4e868af5e951a98ac904ca0" "a1bf279f49d6d5f6081fb7cf20de66a6" "dce70362129f2ae77c672b4f1c8744cb" "0a4bd7a03dbbeb36dc41b0f87facc20c" "217ee02b0ebc05e1d393080e5bcf822c" "fbad2ffefab65e6d9973cdadbf232afd" "8df47f4627940f01a304eb14953b629d" "0cf6a86ccfa21556ea8fa649723a2036" "b99efc2c16abad7be218dfa9cebf5162" "702585541c6ec48dd86563e623fc71df" "4f9386c5142503cee3da786519ac060d" "961710ef8d789b171c759b802a12f4b6" "12458fed408f3098c60af045733d710e" "dd33fb2439541153129599518bc31805" "a415def24e9618547c16a290eabae75c" "3f6c13674329c59f8bda019998e0d4d0" "e314b8982bec9667b24b58517b5311c6" "4743537a68f4f28309fface63a42548c" "4b9d931487d46eebbc5c6de1002b107b" "883e0289ba0cd025565684c878f93bc1" "eda090d18f0c008b0bdd1a4db5a1f783" "89127ea1f7610a6a6d16ae0e218a8414" "659ee91a6dbc852fab54203b445b6e1c" "4bc277c7656726ed53622471bb1e3bc2" "2144ccf4cb06652202f9a5598ff7b6b7" "84c74c476c6e2fa21432b286724cd925" "d3db98f9286eebca7ae96da89dfcb450" "e5178b575f54a906759bc0ecee25438f" "c603c1a807242d89195feb9f2e19eeac" "def8da085d19c66321e8b4227810f931" "6f0e534132ae6c60702451373ee1af2e" "a2f9ab078ffcfca64b717d21d02d2da4" "e9f0c1824f92020cce3ee2140c9463eb" "7a4b686a9850ce76239dca042dea1be6" "c28e3d29453c722658d27a49ad065e99" "5599a28a4fff390e4b497c5abb381f01" "b93c0ee008fa5de9095404da9f6bc93c" "0e68b8baacfb597c0e1a965a51463348" "9a1f44cd7e93404c81458d5f8922502b" "c90b043e3cc4f9aa0c49ef25c8d74aa2" "37e006451c30d723719ae9429159cb96" "20e8e7ad4867a310880f76526c7c0a18" "6e7ba878e3615dc60d0bae4db5c551a5" "170ad3f260e0111ef5be906e338c4069" "edcaeab37285354efeaf0e7f91550ddc" "48e7b7da91c6fa5318f337cb265e33bd" "6333821d2110a71ecc9930e7227fda0a" "88355c58017bd37718c97cb18613810f" "036d2be3d70e2b9e9b0af489d62cf977" "198aa412966d6e16d244506af8993b2a" "b49a3ef949f0982883ac8d3f8f99d20c" "b24acd7bf59e2e9a9074bb78b43bbfcc" "0846899cd51a64218a52437450717bad" "b6dc4c0d7133ab869748753573344456" "2722ab3792f1ab481019f3433c6e57e7" "789202d85805e8e085ff9f7653af0dd7" "8a67d76137863d74dc9ff583abd6d975" "ae8d8b5e742533b81c5edc8ea4f95a14" "593fd9981578e6785e85d15fc5f0f470" "ffb4a7c80db17a46ec8588de2e5b752f" "66932b2f9027464f217b6ad710402318" "3af29f22829a33278267d89dc9b83162" "e1d31f86dfe39dc8238bde3600e2acd8" "4daeb5c0175574773e23ab9dff633d18" "664f2c0bd6324ba4c4d1e187e0c37bd2" "14b7c10d16e0f3cd7c0a24b7ac3848be" "4f581b2d646f0b5b349e35b839e3856f" "f03bd1fa0f527d44d7596ba9fa78d7ec" "dfea75d18596a29824dbac92792b769d" "1b586ea743625871fe40ac31827e4e49" "5bac4b34abb48f6caf205f1b95412c20" "a891e0673ed10cacf48a59c1e461c1a0" "abd7278e9f9f9f016dbfc72a54d06570" "5e1f5c0f2c057cfab1b6161ace43dc19" "7cdf41f2b1a4315dc72c5091d6780112" "460a7a7acb606d8839c6b17167d5bbbc" "b10e1ba4775894a07fc6ab22cf950dbe" "4d68f15470759364e07440e23aeb44c0" "d5af1dda9c179c37c9751664528f515e" "97cf50d2f235558a1e9824404aeddd8a" "842d8795599f9cbfebf602bb60c01465" "1b5a594c0742f257d6d4f387dd644730" "07122cee6195749240ce610516e3dbee" "c1ad7d838acc8fcd8f93ecd24e63b8d6" "0b06561b29989c561f0cc981319e1772" "0a98023fb8408880b670122dad16476c" "2ea304ac091db21a5a9a133d4ec97108" "d369e2bccbb671b8061fdd8e28033c1e" "b39a7bac06b8954832b1507724e76e4b" "54d921ed41f01cd0e0428b4eeb3cfbf7" "873c8c5f2082c9b7577492a19c22dfa3" "85eb87290f8b587aea5ed18775df1c43" "3305ebf360508319eb5ec5316d7d1b39" "92dd98caedbc4be433ed2d87fed73ebc" "8f3d692e8d4e71e15de48bb2a57433c1" "1c243848e0b4d4731253aa09ec4c2195" "244d4b49939e2fafdb1388a14f36121f" "3e0e21a52073fe21238131097f7f1aff" "b5f86dc3325f82374703abfc77d2942c" "0bf1eae2acc1ca8c64a6c675e28db0b9" "1bf139b4ef3ef94da5ae87691e495a6f" "d505f499aec8557563f0b25098bd8cb2" "16f1c71d7e29b7ffe4d894720418d011" "9628e34e6404f8d907d2cc7799393d02" "54bc7203bc70e200c39b144a8a04a06e" "0437e93be2bbe67dc2d306de20dedcd0" "c2c04e6a31f85344502696d1e74a7bab" "7254807f732629a8670aab1da71306bf" "60aa350d2f1b476383a2fd8c008c7a28" "216aed5eb29ca83969423777d25e7e13" "8c9672a83b6c23b0857f93e07e80f04d" "26f6d89eea67a722fc6c6bd603495855" "783349e7ca8d4ab933c53ca5bf25d4fc" "d4c66e1a0245a730569006003fda0df5" "b7427aff795de065441d200cc0c90037" "0c55784c54d57f816845bc105712e22f" "b21750f611a4f852baf1a19289a62f97" "1f0c1ca473fd64884f5202c58e82974a" "554ff73033beb10b17d0ca671eed5363" "e0def683094d6e357847baaf2d293a9f" "3d8fe2d99d2a6b936290636511ff8d26" "a39e38308614661fa75bcdbdc976e825" "938208e702c52273fe7475cbe9962a5b" "de64b0f909da91d34126ec1234d36faa" "0a83fa3a266339dcfd8b45d807bb6781" "cb78fd7f1100c2964710846d0adf9883" "d7b19e2fcb5a129c859ab982f2389d8f" "12d61ae1d03fe6bc0e22479f5608b070" "1355628e48f6f22cfab866268ffd95f6" "da1e1f5049144406d6d0336ee11dbc2a" "da525234db89876989869975d861207d" "4c2fd7db7dc19895379fc07d24858e72" "0dae2f6e330fc46c5a54201548dddf57" "bd0c5b63029c5f9eda870644ff9f73d6" "cb196fc0e81e3c92ca0e48a0abfd49cd" "8e47b12d1deec8af2d10e2bdd869fefa" "ce588ffd16829b6eec6e17167c7ea9ed" "9bd2f6e7060d11904e9fe323799af891" "c9b34310b02f5666edc32ceaffa63555" "dd160d01741c350f6db0e2fa83cc22c0" "5c1acbf25667153fc533385e79bdbb07" "c892a9153bb4d8111756f97b15cc918c" "f1f8adfa8b9172518c0f173769c7335f" "96bebc68fdb7703ff0190cdd06e1a2de" "f26f07c8db229df2f6a42b19e8b950b7" "3f023ef55312dfbb3aca18e607705cb2" "e5e1c36f45d14ee607bde8857c39a17d" "cea41fb8b0977b4fce8c75e33de97f98" "901e30c329eda3e175c52d3fc514dd2f" "214bf5c464e262832daa80c9bac2151f" "203ca13257158f30da25a8c778c7e9e9" "1d4bee7386d32a6a36f8adbc83ffb5e7" "fed08147a0e1ec440893cd566600ae55" "0d0eecd588933ade28583a72d2431efe" "95d1bd8845e68c2d4b8f4ef11adcd562" "14d120a8bfc9f3f4715dbefc5e6a04b7" "a6b821288c082ad48f823487a19d1f3b" "c308d62bed4282cc5ec6bc653ed174ac" "5feeebfd58e6c6beec4e5b12b691d4a9" "1087cbafd92f53b76e2f99cd17e5ef3d" "123e5254d16e91f4e0b8d2f3ba2372c8" "42917741a3af0a4227ca9496f21d63da" "90f2613a1ab863b484f15558b0cd8fa3" "e4f14575f70111bff011f53873bc721c" "2a097343961d107b49e595849b6fe073" "6ead92116beeb1fd9da6c77dfcd601a1" "efd3919aa7845f83b02addd07449a8ee" "399e05213e8a614a35c8d9f70fb7d53c" "20ca8f0cc3c5ebe36942bf87735daaac" "9007678163fc3023be59b0373667502e" "e1c439305cd82df88ac047bac61da229" "74a16c38a6e115569cc52dfe5eaf57b0" "a53781ce74dd666a25a3cfd08c1ff2c2" "bb8c43b6a520a7b8d6fa434dc8fda61e" "432efcfc4fde003a3aa6eb035ecc02b8" "5fa2473f39f613a9c7995e6fbb3ba97c" "2a25ba2fed828ea53f1c42b08332a835" "a3bca14eef8fecf456b5aea7c18a14de" "ec3455ff6e1f7847bb3915663930eabf" "6de0f45567f7058c3ae1cfd78029eb88" "524bacd2974ebe77e28bec7d9b82ea5c" "678a25acc7aecf689e14aa61d47aed5c" "27c866477ea21e25390d9286e5f6ac4b" "15805a78cf29af550b1b7ac6a5241860" "4e9a4421fc05ee060f3d6ae50ed28e6d" "e51b230b0d01732e215971e2b2dfb76a" "1653bcbb701dd4be49d5e21d14ded31c" "8c0497cc2e95a448316d322ed76c760a" "0e81b7a2c7b813fe21e890e983916f97" "69ef00e24a5cf86aefc356cda00adb0f" "f49762af78f4f230e657022fe59c9944" "1867dbe695c319a79b3e64c626919233" "a34034ebc134e021370e9091076d9e77" "82b32f864498482bababded17a130a16" "f7d69d30ae74256a1cadb350ea293f4e" "30b886d79a79b76af03baa2f1351065d" "fed08147a0e1ec440893cd566600ae55" "0d0eecd588933ade28583a72d2431efe" "95d1bd8845e68c2d4b8f4ef11adcd562" "14d120a8bfc9f3f4715dbefc5e6a04b7" "a6b821288c082ad48f823487a19d1f3b" "c308d62bed4282cc5ec6bc653ed174ac" "5feeebfd58e6c6beec4e5b12b691d4a9" "1087cbafd92f53b76e2f99cd17e5ef3d" "123e5254d16e91f4e0b8d2f3ba2372c8" "42917741a3af0a4227ca9496f21d63da" "90f2613a1ab863b484f15558b0cd8fa3" "acb556e5d16836accb478750f9a7f947" "a8a143e2dc56f77e519be4ab6e651467" "599e6b43ec6aba08bf5b550c5c5326f5" "6ead92116beeb1fd9da6c77dfcd601a1" "efd3919aa7845f83b02addd07449a8ee" "847d4fa356f0b7c5974b2c4591fb740e" "780f0f35c68bfe6a7af1a45cf5535ac6" "02dcfb8c2501dd1819ac7ff2375a5a80" "694e2a1bf96a983f50be005739623381" "82711e904ede4e218f8f9214c058de2d" "a199bbe120dfc6b13e7767451777f055" "95a02c5469ce2b28467d7e17f86be42f" "fc3bed8e7b36a0dd0653a37c2ebaf689" "e4b20d3f5c5f59465b4fdfc9235c066a" "27ff8215323a18802935309f28e819ab" "c3c0bb1be93be3ecc63657d53cb5c82f" "a1d66949aa6460870742152cf6e85ea1" "607b466797e38e987f0931478bce0b01" "f9f99fe11d8aac7ce05a90cfde531cc4" "3bb2f21804a70a71e1c3ab8be8893cd4" "e13c5ef9fdde15733af33f19b51da749" "f022e1a394aec3f9e2bae066dc3b1e8f" "29fe411a638de651cf8ed3216ed9f8df" "e7f590713a152d7472af3b85a15b64b7" "05727e6dce13713ec869909a55218358" "58f26dde9f658f23c352438bfe1a4e54" "683da652fb99ba86b4112ff014c0f161" "1095a8dd4791d0f72cd631e334828fb0" "870da5781095f77707879514a1888027" "8e590b0e319011867bba5e90040410a5" "948c3358cc82564a0002cf4fc5606ed6" "82b32f864498482bababded17a130a16" "f221316670e99f260c1e7bc438e4e15a" "253d653fce552dc48d3d14cb7cc20ef7" "00491bdbb7c928dc94826e4f1bdfe92d" "85ab744dea95ea451969f5a8e65c4664" "9352073cb727da2f2897a1df019081e1" "a9b22902cd6fc2b573b7892fa447f783" "9df8fdd4e19023d1e30a55d4058d7059" "48d78496f2fc937f9ced17142b2714e9" "97c111f3a4dfbdcb3fa33ffea5055614" "235f9e6a60b2ff346c0b13b64689958e" "247c55d52a3061377b08863e49e7a84b" "ac2938cfe39c6550d443724d62b3935b" "cf11b15c0618d02ffb282f667ec452a7" "9305c9d0193f68bbcc3d7df574b70e6a" "5ddf3573960a54d131a2ef60a86d3055" "a0f7573d95c41d5fe0efed0c6be24d07" "bdfe0d2b84da42e1b50422f70958025b" "0423dcdaef832b0bad19136faf0a7092" "c6152a2184b923855c8b9d039f6029b5" "7cd5fa332f83ab146d85ebd35522740a" "9a98686092b4e0aff8af58b8856d1bae" "615e81fb1ff2170d6b03cfcfb0cf3d0e" "ff6e89b64a2c75a55f10afca331b39ba" "e65096493170d3489d1412d21856f972" "faab201b8bcf720730259a35ffb5c581" "440e9ba875b2499db3b195aa9c2dd62a" "f14641134a6f7370484eaa9cefbcc47d" "016b632192f73e86aecad7c62f96d22c" "a5ec78efa6fc1443fa659433577eab82" "3c269f87a7db29f54fa1473ae5a03102" "0425d5b6975d0a9455bcd061dd24525e" "2e87acb66a7bc3d0e057b5dc05a33429" "7b6dde23bc8755f12ad7ba9122f0cd6e" "281c8614299be1b629ec97f3b661efcf" "11557f320464df2a334d38417b5c2c29" "a95055289f2d22f6ddfdde83f12e8335" "4eaef0e0ed4ad11a678018a43656c269" "b65d2069718aab33007d433ea9bb461b" "a92b766c32eb0fc9df613225ed3d3fb1" "7d844fa0a978db96a698af48a8ddceff" "59cc0011e1200c633ff5f9d87b382f64" "500f86ec96b58f1c7614115d9029306b" "7fafae0acc40a94fef493939fe552368" "ff895dfd39c54b03206fb680d3b849d9" "777882ca1f287dc58aa69cddb59a00a4" "4dec72dde4c8435a0d67dd4dd73341fd" "cd014252be921548ee2d2095d65e84c2" "b7f046b7feeb02069b409418206aa3b8" "a0e96419d717a9b82435b510e2d99888" "631fe86c55492e055f8046e008199478" "3ceb934c8aa7b31dad39d984624d0dcd" "c10efdbf004a17f42b305c11140f6149" "dd09ae9b7bd72776498ef4cf97c9768b" "2c73d19b4801696e6af0def9ccb35a5a" "4c7385ade80bee5031a90039044a8074" "1acfac79eb3e810af6e483a5621c68b8" "7edf6fb0fd2285bf48d720a7a53921b1" "4596a18124d31af7a1e0fb041ff90b91" "5db8f8973d1ba897d5a05cd76a0acdee" "84da432325eaeb8f0885575fea45f08a" "48b717e8cab477db011e04f7a35e9bea" "936147c0c41981110a0b2a4ae51cedb0" "339ef7b4d603639b389df671553700da" "73b01dca513400a8bdb555772407e812" "d71ebdb16860b1d98743dd84866df412" "182e2dacb235aa74ec0b155e6ea72436" "f2d78c79bed591acafdb3f6c051bacb2" "79342275cea4033bebdecbdaeb5674cf" "f60d2bb5615e80688b7f7eb4b8d9de4f" "29dfaf55c84ef4f65800f36f790f9c66" "87558e21a6ec9316c10edacd5c051622" "e94a6e1d144f1402131afce8c25737dc" "3914f2fc67458e05d72175a8f34b245f" "bc5d44661d2bd83f4e7f4f42571b31d7" "cee3972fa8b52bc5e041fb06d56d2777" "b8f499d51737b311e810b2c6ec6073cc" "7b50cf09627055e05ce3e29b6d4e6712" "c3d285189df11424e84425859e8557ae" "7c1cf37602fc2d8a398db0acd9a953e4" "004a7a5425b81f414258d80995781f81" "3517a687bf377296b60c58e0a4773c3b" "847e1ee750e73abcdb14a06e89c6970f" "341215ee7b42010c5914cd02917d0175" "903335cff015bb0a7e665aaa06df707d" "8751b99b1bced71725c8ab628b174089" "bb5918dda64082a46bd6adf1b3e4a88b" "1d88fbf0c670a220fec92f0691100c5e" "d55bf1520db32b9104fdc5bc9c8a7c9a" "8b06e06cb86b368ba2e225c1e9ae53ad" "86ebd3f51aac0dfff8daa0c681f7679b" "6031504df9e27805ff265f8467bd806f" "043829d383f226995be7fb4e4ee10b7a" "270c8f9b8a47524db4030c6ad21c4372" "e36f916605e4370c64960dc9c3250533" "e01e8d6d104d561cfcbcf56d85e52081" "9f17fd5d52fa63437b43be0087a65873" "1e70e7296320700ebe8dac11a1c6ebf6" "c781c8739e5ac51ed90c0d66f4811bf1" "1f71f797c4b0677cf0be53dc8fc7799e" "b357f80531804d1d7d2289c7ad5b6c18" "5c7c19b8cbf900cb666afdfd8b1df3a1" "2af780517d4593f136e7fb277d5f75ea" "7a01e04d846c5cd266ea7fdb8d6648dd" "e18ac7184c7d6e164898c50c3afca37b" "283831b1c535fb94864127c988256fef" "4e0c79579f6ad1586a5df5972c75c8e7" "f150d2bc6a139e574fac38e834bb3025" "1229cfc3d767fb0a5fcb9425c06a6f3e" "31f2236c32ae784c38ba83ee8e21bf25" "51e89f03f6d899cbd49f95fed4ef029a" "8ac684080e7c8058f57b3871ffab47d0" "dc5ce8eb649b9d5bac316837203750d9" "5de285b14082408b27f2ba7f6a5b01fb" "6d71eb66d814f3104175442ecfab7194" "c94f5100eb16b4b3253514e0c526cb25" "01405f0b704f4c1141a297d113b56c1c" "a248bf1c44f884a4d6a0988f5164994c" "96bad3fa1c69ddf0ac2fadaf9a86f7ca" "72d7722bb654a22193fe3ae36630f820" "7bb568835932a2acbfc497f7c77d1336" "5912fe1588e16a41705b610289c997a0" "24bd673de2ebc651daa9c581636c79ab")) (3) 0 () 0 () () (c (c acquire c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/board-adapted.rkt") (c require/typed/check c (u . "board.rkt") q (#:struct tile ((column : Column) (row : Row))) (tile<=? (-> Tile Tile Boolean)) (tile->string (-> Tile String)) (ALL-TILES (Listof Tile)) (STARTER-TILES# Natural) (FOUNDING (quote FOUNDING)) (GROWING (quote GROWING)) (MERGING (quote MERGING)) (SINGLETON (quote SINGLETON)) (IMPOSSIBLE (quote IMPOSSIBLE)) (deduplicate/hotel (-> (Listof Hotel) (Listof Hotel))) (make-board (-> Board)) (board-tiles (-> Board (Listof Tile))) (what-kind-of-spot (-> Board Tile SpotType)) (growing-which (-> Board Tile (Option Hotel))) (merging-which (-> Board Tile (Values (Pairof Hotel (Listof Hotel)) (Listof Hotel)))) (size-of-hotel (-> Board Hotel Natural)) (free-spot? (-> Board Tile Boolean)) (merge-hotels (-> Board Tile Hotel Board)) (found-hotel (-> Board Tile Hotel Board)) (grow-hotel (-> Board Tile Board)) (place-tile (-> Board Tile Board)) (set-board (-> Board Tile Kind (Option Hotel) Board)) (affordable? (-> Board (Listof Hotel) Cash Boolean)) (*create-board-with-hotels (-> (Listof Tile) (Listof (Pairof Hotel (Listof Tile))) Board)) (distinct-and-properly-formed (-> (Listof Tile) (-> (Listof (Pairof Hotel (Listof Tile))) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/board.rkt") (c require/typed/check c (u . "basics.rkt") q (hotel? (-> Any Boolean)) (SAFE# Natural) (price-per-share (-> Hotel Natural (Option Cash))) (shares-order? (-> Any Boolean)) (hotel->color (-> Hotel Color)) (hotel->label (-> Hotel String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/basics.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (-> (Listof Hotel) Hotel)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/basics.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (-> (Listof Hotel) Hotel)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/board.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (aux:partition (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))) (distinct (-> (Listof Any) Boolean)) (randomly-pick (All (A) (-> (Listof A) A))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/board.rkt") (c require/typed/check c (u . "basics.rkt") q (hotel? (-> Any Boolean)) (SAFE# Natural) (price-per-share (-> Hotel Natural (Option Cash))) (shares-order? (-> Any Boolean)) (hotel->color (-> Hotel Color)) (hotel->label (-> Hotel String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/basics.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (-> (Listof Hotel) Hotel)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/basics.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (-> (Listof Hotel) Hotel)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/board.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (aux:partition (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))) (distinct (-> (Listof Any) Boolean)) (randomly-pick (All (A) (-> (Listof A) A))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/state-adapted.rkt") (c require/typed/check c (u . "state.rkt") q (score? (-> Any Boolean)) (#:struct player ((name : String) (tiles : (Listof Tile)) (money : Cash) (shares : Shares) (external : (Option (Instance Player%))))) (#:struct state ((board : Board) (players : (Listof Player)) (tiles : (Listof Tile)) (hotels : (Listof Hotel)) (shares : Shares) (bad : (Listof Player)))) (*create-player (-> String Cash Shares (Listof Tile) Player)) (player0 (-> String Tile Tile Tile Tile Tile Tile (Instance Player%) Player)) (state0 (-> Player * State)) (state-sub-shares (-> State Shares State)) (*cs0 (-> String * State)) (*create-state (-> Board (Listof Player) State)) (state-place-tile (->* (State Tile) ((Option Hotel)) State)) (state-move-tile (-> State Tile State)) (state-next-turn (-> State State)) (state-remove-current-player (-> State State)) (state-eliminate (-> State (Listof Player) State)) (state-current-player (-> State Player)) (state-buy-shares (-> State (Listof Hotel) State)) (state-return-shares (->* (State Decisions) (Board) State)) (state-score (-> State (Listof (List String Cash)))) (state-final? (-> State Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/state.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (CASH0 Cash) (FINAL# Natural) (SAFE# Natural) (banker-shares0 Shares) (bonus (-> M*ority Hotel Natural Cash)) (cash? (-> Any Boolean)) (player-shares0 Shares) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares->string (-> Shares String)) (shares-available (-> Shares Hotel Share)) (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares-combinable? (-> (Listof Shares) Boolean)) (shares-order? (-> Any Boolean)) (shares-minus (-> Shares Shares Shares)) (shares-plus (-> Shares Shares Shares)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/state.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (aux:partition (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))) (distinct (-> (Listof Any) Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/state.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (CASH0 Cash) (FINAL# Natural) (SAFE# Natural) (banker-shares0 Shares) (bonus (-> M*ority Hotel Natural Cash)) (cash? (-> Any Boolean)) (player-shares0 Shares) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares->string (-> Shares String)) (shares-available (-> Shares Hotel Share)) (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares-combinable? (-> (Listof Shares) Boolean)) (shares-order? (-> Any Boolean)) (shares-minus (-> Shares Shares Shares)) (shares-plus (-> Shares Shares Shares)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/state.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (aux:partition (All (A B) (-> (Listof A) (-> A Real) (-> A B) (Listof (Listof B))))) (distinct (-> (Listof Any) Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "admin.rkt") q (administrator% Administrator%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/tree.rkt") (c require/typed/check c (u . "basics.rkt") q (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares-order? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/admin.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (hotel? (-> Any Boolean)) (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares? (-> Any Boolean)) (shares-order? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/tree.rkt") (c require/typed/check c (u . "basics.rkt") q (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares-order? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/admin.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (hotel? (-> Any Boolean)) (shares-available? (-> Shares (Listof Hotel) Boolean)) (shares? (-> Any Boolean)) (shares-order? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "player.rkt") q (random-players (-> Natural (Listof (Instance Player%)))) (ordered-players (-> Natural (Listof (Instance Player%)))) (inf-loop-player (-> Natural (Instance Player%))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/player.rkt") (c require/typed/check c (u . "admin.rkt") q (administrator% Administrator%) (turn% Turn%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/player.rkt") (c require/typed/check c (u . "basics.rkt") q (player-shares0 Shares) (*combine-shares (-> (Listof Shares) Shares)) (shares-minus (-> Shares Shares Shares)) (banker-shares0 Shares))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/player.rkt") (c require/typed/check c (u . "strategy.rkt") q (ordered-s Strategy) (random-s Strategy))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (SHARES-PER-TURN# Integer) (hotel<=? (-> Hotel Hotel Boolean)) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares-available (-> Shares Hotel Share)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (All (A) (-> (Listof A) A))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (SHARES-PER-TURN# Integer) (hotel<=? (-> Hotel Hotel Boolean)) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares-available (-> Shares Hotel Share)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (All (A) (-> (Listof A) A))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/player.rkt") (c require/typed/check c (u . "admin.rkt") q (administrator% Administrator%) (turn% Turn%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/player.rkt") (c require/typed/check c (u . "basics.rkt") q (player-shares0 Shares) (*combine-shares (-> (Listof Shares) Shares)) (shares-minus (-> Shares Shares Shares)) (banker-shares0 Shares))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/player.rkt") (c require/typed/check c (u . "strategy.rkt") q (ordered-s Strategy) (random-s Strategy))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (SHARES-PER-TURN# Integer) (hotel<=? (-> Hotel Hotel Boolean)) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares-available (-> Shares Hotel Share)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (All (A) (-> (Listof A) A))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "basics.rkt") q (ALL-HOTELS (Listof Hotel)) (SHARES-PER-TURN# Integer) (hotel<=? (-> Hotel Hotel Boolean)) (price-per-share (-> Hotel Natural (Option Cash))) (shares++ (-> Shares Hotel Shares)) (shares-- (-> Shares Hotel Shares)) (shares-available (-> Shares Hotel Share)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/strategy.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (All (A) (-> (Listof A) A))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "auxiliaries.rkt") q (randomly-pick (-> (Listof Tile) Tile))))) c (c dungeon c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "cell.rkt") q (void-cell% Cell%) (wall% Cell%) (door% Door%) (vertical-door% Door%) (horizontal-door% Door%) (horizontal-wall% Cell%) (four-corner-wall% Cell%) (pillar% Cell%) (vertical-wall% Cell%) (north-west-wall% Cell%) (north-east-wall% Cell%) (south-west-wall% Cell%) (south-east-wall% Cell%) (north-tee-wall% Cell%) (west-tee-wall% Cell%) (east-tee-wall% Cell%) (south-tee-wall% Cell%) (empty-cell% Cell%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/cell.rkt") (c require/typed/check c (u . "message-queue.rkt") q (enqueue-message! (-> String Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/cell.rkt") (c require/typed/check c (u . "message-queue.rkt") q (enqueue-message! (-> String Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "grid.rkt") q (array-set! (-> Grid Pos (Instance Cell%) Void)) (build-array (-> Pos (-> Any (Instance Cell%)) Grid)) (left (->* (Pos) (Index) Pos)) (right (->* (Pos) (Index) Pos)) (up (->* (Pos) (Index) Pos)) (down (->* (Pos) (Index) Pos)) (grid-ref (-> Grid Pos (U #f (Instance Cell%)))) (grid-height (-> Grid Index)) (grid-width (-> Grid Index)) (show-grid (-> Grid String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/grid.rkt") (c require/typed/check c (u . "cell.rkt") q (char->cell% (-> Char Cell%)) (void-cell% Cell%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/grid.rkt") (c require/typed/check c (u . "cell.rkt") q (char->cell% (-> Char Cell%)) (void-cell% Cell%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "utils.rkt") q (random (-> Integer Natural)) (random-between (-> Integer Integer Integer)) (random-from (All (A) (-> (Listof A) A))) (reset! (-> Void))))) c (c forth c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "eval.rkt") q (forth-eval* (-> (Listof String) (Values Any Any))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/eval.rkt") (c require/typed/check c (u . "command.rkt") q (CMD* (Listof (Instance Command%))) (command% Command%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/command.rkt") (c require/typed/check c (u . "stack.rkt") q (stack-drop (-> Stack Stack)) (stack-dup (-> Stack Stack)) (stack-init (-> Stack)) (stack-over (-> Stack Stack)) (stack-pop (-> Stack (Values Integer Stack))) (stack-push (-> Stack Integer Stack)) (stack-swap (-> Stack Stack)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/command.rkt") (c require/typed/check c (u . "stack.rkt") q (stack-drop (-> Stack Stack)) (stack-dup (-> Stack Stack)) (stack-init (-> Stack)) (stack-over (-> Stack Stack)) (stack-pop (-> Stack (Values Integer Stack))) (stack-push (-> Stack Integer Stack)) (stack-swap (-> Stack Stack)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/eval.rkt") (c require/typed/check c (u . "stack.rkt") q (stack-init (-> Stack)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/eval.rkt") (c require/typed/check c (u . "command.rkt") q (CMD* (Listof (Instance Command%))) (command% Command%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/command.rkt") (c require/typed/check c (u . "stack.rkt") q (stack-drop (-> Stack Stack)) (stack-dup (-> Stack Stack)) (stack-init (-> Stack)) (stack-over (-> Stack Stack)) (stack-pop (-> Stack (Values Integer Stack))) (stack-push (-> Stack Integer Stack)) (stack-swap (-> Stack Stack)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/command.rkt") (c require/typed/check c (u . "stack.rkt") q (stack-drop (-> Stack Stack)) (stack-dup (-> Stack Stack)) (stack-init (-> Stack)) (stack-over (-> Stack Stack)) (stack-pop (-> Stack (Values Integer Stack))) (stack-push (-> Stack Integer Stack)) (stack-swap (-> Stack Stack)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/eval.rkt") (c require/typed/check c (u . "stack.rkt") q (stack-init (-> Stack))))) c (c fsm c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "population.rkt") q (build-random-population (-> Natural Population)) (population-payoffs (-> Population (Listof Payoff))) (death-birth (-> Population Natural (#:random (U False Real)) Population)) (match-up* (-> Population Natural Population)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/population.rkt") (c require/typed/check c (u . "utilities.rkt") q (choose-randomly (-> (Listof Probability) Natural (#:random (U False Real)) (Listof Natural))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/population.rkt") (c require/typed/check c (u . "utilities.rkt") q (choose-randomly (-> (Listof Probability) Natural (#:random (U False Real)) (Listof Natural))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "utilities.rkt") q (relative-average (-> (Listof Real) Real Real))))) c (c fsmoo c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/automata-adapted.rkt") (c require/typed/check c (u . "automata.rkt") q (make-random-automaton (-> Natural oAutomaton)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/population-adapted.rkt") (c require/typed/check c (u . "population.rkt") q (build-random-population (-> Natural oPopulation)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/population.rkt") (c require/typed/check c (u . "utilities.rkt") q (choose-randomly (-> (Listof Probability) Natural (#:random (U False Real)) (Listof Natural))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/population.rkt") (c require/typed/check c (u . "utilities.rkt") q (choose-randomly (-> (Listof Probability) Natural (#:random (U False Real)) (Listof Natural))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "utilities.rkt") q (relative-average (-> (Listof Real) Real Real))))) c (c gregor c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/core-adapter.rkt") (c require/typed/check c (u . "core-structs.rkt") q (#:struct YMD ((y : Natural) (m : Month) (d : Natural))) (#:struct HMSN ((h : Integer) (m : Integer) (s : Integer) (n : Integer))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/gregor-adapter.rkt") (c require/typed/check c (u . "gregor-structs.rkt") q (#:struct Date ((ymd : YMD) (jdn : Integer))) (#:struct Time ((hmsn : HMSN) (ns : Natural))) (#:struct DateTime ((date : Date) (time : Time) (jd : Exact-Rational))) (#:struct Moment ((datetime/local : DateTime) (utc-offset : Integer) (zone : (U String #f)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "date.rkt") q (date=? (-> Date Date Boolean)) (date (->* (Natural) (Month Natural) Date)) (date->iso8601 (-> Date String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/date.rkt") (c require/typed/check c (u . "ymd.rkt") q (ymd->jdn (-> YMD Integer)) (jdn->ymd (-> Exact-Rational YMD)) (jdn->iso-wday (-> Integer (U 1 2 3 4 5 6 7))) (ymd->yday (-> YMD Natural)) (iso-weeks-in-year (-> Natural (U 52 53))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/date.rkt") (c require/typed/check c (u . "ymd.rkt") q (ymd->jdn (-> YMD Integer)) (jdn->ymd (-> Exact-Rational YMD)) (jdn->iso-wday (-> Integer (U 1 2 3 4 5 6 7))) (ymd->yday (-> YMD Natural)) (iso-weeks-in-year (-> Natural (U 52 53))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "time.rkt") q (time=? (-> Time Time Boolean)) (time->iso8601 (-> Time String)) (make-time (->* (Integer) (Integer Integer Integer) Time)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/time.rkt") (c require/typed/check c (u . "hmsn.rkt") q (hmsn->day-ns (-> HMSN Natural)) (day-ns->hmsn (-> Natural HMSN)) (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/time.rkt") (c require/typed/check c (u . "hmsn.rkt") q (hmsn->day-ns (-> HMSN Natural)) (day-ns->hmsn (-> Natural HMSN)) (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime=? (-> DateTime DateTime Boolean)) (datetime<=? (-> DateTime DateTime Boolean)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->time (-> DateTime Time)) (datetime->date (-> DateTime Date)) (datetime->iso8601 (-> DateTime String)) (datetime->posix (-> DateTime Exact-Rational)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/datetime.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/DAY Natural) (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/datetime.rkt") (c require/typed/check c (u . "date.rkt") q (date->iso8601 (-> Date String)) (date->jdn (-> Date Integer)) (jdn->date (-> Integer Date)) (date->ymd (-> Date YMD)) (date (->* (Natural) (Month Natural) Date)) (date=? (-> Date Date Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/datetime.rkt") (c require/typed/check c (u . "time.rkt") q (time->iso8601 (-> Time String)) (time->ns (-> Time Natural)) (day-ns->time (-> Natural Time)) (make-time (->* (Integer) (Integer Integer Integer) Time)) (time=? (-> Time Time Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/datetime.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/DAY Natural) (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/datetime.rkt") (c require/typed/check c (u . "date.rkt") q (date->iso8601 (-> Date String)) (date->jdn (-> Date Integer)) (jdn->date (-> Integer Date)) (date->ymd (-> Date YMD)) (date (->* (Natural) (Month Natural) Date)) (date=? (-> Date Date Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/datetime.rkt") (c require/typed/check c (u . "time.rkt") q (time->iso8601 (-> Time String)) (time->ns (-> Time Natural)) (day-ns->time (-> Natural Time)) (make-time (->* (Integer) (Integer Integer Integer) Time)) (time=? (-> Time Time Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "moment.rkt") q (current-timezone (Parameterof (U tz #f))) (moment (->* (Natural) (Month Natural Natural Natural Natural Natural #:tz (U tz #f) #:resolve-offset (-> (U tzgap tzoverlap) DateTime (U String #f) (U #f Moment) Moment)) Moment)) (moment=? (-> Moment Moment Boolean)) (UTC String) (moment->iso8601/tzid (-> Moment String)) (posix->moment (-> Exact-Rational tz Moment)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->posix (-> DateTime Exact-Rational)) (posix->datetime (-> Exact-Rational DateTime)) (datetime->jd (-> DateTime Exact-Rational)) (datetime-add-seconds (-> DateTime Integer DateTime)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "moment-base.rkt") q (make-moment (-> DateTime Integer (U String #f) Moment)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment-base.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment-base.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "offset-resolvers.rkt") q (resolve-offset/raise (-> (U tzgap tzoverlap) DateTime (U String #f) (U Moment #f) Moment)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)) (posix->datetime (-> Exact-Rational DateTime)) (datetime->posix (-> DateTime Exact-Rational)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->jd (-> DateTime Exact-Rational)) (datetime-add-seconds (-> DateTime Integer DateTime)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "moment-base.rkt") q (make-moment (-> DateTime Integer (U String #f) Moment)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment-base.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment-base.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)) (posix->datetime (-> Exact-Rational DateTime)) (datetime->posix (-> DateTime Exact-Rational)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->jd (-> DateTime Exact-Rational)) (datetime-add-seconds (-> DateTime Integer DateTime)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "moment-base.rkt") q (make-moment (-> DateTime Integer (U String #f) Moment)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment-base.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->posix (-> DateTime Exact-Rational)) (posix->datetime (-> Exact-Rational DateTime)) (datetime->jd (-> DateTime Exact-Rational)) (datetime-add-seconds (-> DateTime Integer DateTime)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "moment-base.rkt") q (make-moment (-> DateTime Integer (U String #f) Moment)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment-base.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment-base.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/moment.rkt") (c require/typed/check c (u . "offset-resolvers.rkt") q (resolve-offset/raise (-> (U tzgap tzoverlap) DateTime (U String #f) (U Moment #f) Moment)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)) (posix->datetime (-> Exact-Rational DateTime)) (datetime->posix (-> DateTime Exact-Rational)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->jd (-> DateTime Exact-Rational)) (datetime-add-seconds (-> DateTime Integer DateTime)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "moment-base.rkt") q (make-moment (-> DateTime Integer (U String #f) Moment)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/SECOND Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->iso8601 (-> DateTime String)) (posix->datetime (-> Exact-Rational DateTime)) (datetime->posix (-> DateTime Exact-Rational)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)) (datetime->jd (-> DateTime Exact-Rational)) (datetime-add-seconds (-> DateTime Integer DateTime)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/offset-resolvers.rkt") (c require/typed/check c (u . "moment-base.rkt") q (make-moment (-> DateTime Integer (U String #f) Moment)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "clock.rkt") q (current-clock (Parameterof (-> Exact-Rational))) (today/utc (-> Date)) (today (->* () (#:tz (U tz #f)) Date)) (current-time/utc (-> Time)) (current-time (->* () (#:tz (U tz #f)) Time)) (now/utc (-> DateTime)) (now (->* () (#:tz (U tz #f)) DateTime)) (now/moment/utc (-> Moment)) (now/moment (-> Moment)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/clock.rkt") (c require/typed/check c (u . "moment.rkt") q (current-timezone (Parameterof (U tz #f))) (posix->moment (-> Exact-Rational tz Moment)) (moment->datetime/local (-> Moment DateTime)) (UTC String) (moment (->* (Natural) (Month Natural Natural Natural Natural Natural #:tz (U tz #f) #:resolve-offset (-> (U tzgap tzoverlap) DateTime (U String #f) (U #f Moment) Moment)) Moment)) (moment=? (-> Moment Moment Boolean)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/clock.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->date (-> DateTime Date)) (datetime->time (-> DateTime Time)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/clock.rkt") (c require/typed/check c (u . "moment.rkt") q (current-timezone (Parameterof (U tz #f))) (posix->moment (-> Exact-Rational tz Moment)) (moment->datetime/local (-> Moment DateTime)) (UTC String) (moment (->* (Natural) (Month Natural Natural Natural Natural Natural #:tz (U tz #f) #:resolve-offset (-> (U tzgap tzoverlap) DateTime (U String #f) (U #f Moment) Moment)) Moment)) (moment=? (-> Moment Moment Boolean)) (moment->iso8601 (-> Moment String)) (moment->iso8601/tzid (-> Moment String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/clock.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime->date (-> DateTime Date)) (datetime->time (-> DateTime Time)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "difference.rkt") q (datetime-months-between (-> DateTime DateTime Integer)) (datetime-days-between (-> DateTime DateTime Integer)) (datetime-nanoseconds-between (-> DateTime DateTime Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "ymd.rkt") q (days-in-month (-> Natural Month (U 28 29 30 31))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/DAY Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "date.rkt") q (date->ymd (-> Date YMD)) (date (->* (Natural) (Month Natural) Date)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime<? (-> DateTime DateTime Boolean)) (datetime->date (-> DateTime Date)) (date+time->datetime (-> Date Time DateTime)) (datetime->time (-> DateTime Time)) (datetime->jd (-> DateTime Exact-Rational)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "ymd.rkt") q (days-in-month (-> Natural Month (U 28 29 30 31))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "hmsn.rkt") q (NS/DAY Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "date.rkt") q (date->ymd (-> Date YMD)) (date (->* (Natural) (Month Natural) Date)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/difference.rkt") (c require/typed/check c (u . "datetime.rkt") q (datetime<? (-> DateTime DateTime Boolean)) (datetime->date (-> DateTime Date)) (date+time->datetime (-> Date Time DateTime)) (datetime->time (-> DateTime Time)) (datetime->jd (-> DateTime Exact-Rational)) (datetime (->* (Natural) (Month Natural Natural Natural Natural Natural) DateTime))))) c (c jpeg c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "jfif.rkt") q (#:struct jfif ((frame : frame) (misc-segments : (Listof misc)) (mcu-array : (Array MCU)))) (#:struct frame ((marker : Natural) (precision : Byte) (y : Natural) (x : Natural) (components : (Vectorof component)) (samp-x : Natural) (samp-y : Natural))) (#:struct component ((id : Byte) (index : Natural) (samp-x : Natural) (samp-y : Natural) (q-table : Natural))) (#:struct misc ((marker : Natural) (bytes : Bytes))) (#:struct params ((q-tables : QT*) (dc-tables : H*) (ac-tables : H*) (restart-interval : Natural) (misc-segments : (Listof misc)))) (read-jfif (->* ((U String Bytes Input-Port)) (#:with-body? Boolean #:with-misc-sections? Boolean) jfif)) (write-jfif (-> (U String Output-Port) jfif Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/jfif.rkt") (c require/typed/check c (u . "bit-ports.rkt") q (make-bit-port (-> Port Bit-Port)) (read-signed-bits (-> Bit-Port Natural Integer)) (write-bits (-> Bit-Port Integer Natural Void)) (flush-bits (-> Bit-Port Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/jfif.rkt") (c require/typed/check c (u . "huffman.rkt") q (make-huffman-table (-> Bytes Bytes Huffman)) (read-huffman-coded-value (-> Bit-Port Huffman Byte)) (compute-huffman-table-for-freqs (-> Q-Table Huffman)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/huffman.rkt") (c require/typed/check c (u . "bit-ports.rkt") q (read-bit (-> Bit-Port Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/huffman.rkt") (c require/typed/check c (u . "bit-ports.rkt") q (read-bit (-> Bit-Port Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/jfif.rkt") (c require/typed/check c (u . "bit-ports.rkt") q (make-bit-port (-> Port Bit-Port)) (read-signed-bits (-> Bit-Port Natural Integer)) (write-bits (-> Bit-Port Integer Natural Void)) (flush-bits (-> Bit-Port Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/jfif.rkt") (c require/typed/check c (u . "huffman.rkt") q (make-huffman-table (-> Bytes Bytes Huffman)) (read-huffman-coded-value (-> Bit-Port Huffman Byte)) (compute-huffman-table-for-freqs (-> Q-Table Huffman)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/huffman.rkt") (c require/typed/check c (u . "bit-ports.rkt") q (read-bit (-> Bit-Port Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/huffman.rkt") (c require/typed/check c (u . "bit-ports.rkt") q (read-bit (-> Bit-Port Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "exif.rkt") q (parse-exif (-> Bytes (Listof PTs)))))) c (c kcfa c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs-adapted.rkt") (c require/typed/check c (u . "structs.rkt") q (#:struct Stx ((label : Label))) (#:struct (exp Stx) ()) (#:struct (Ref exp) ((var : Var))) (#:struct (Lam exp) ((formals : (Listof Var)) (call : Exp))) (#:struct (Call Stx) ((fun : Exp) (args : (Listof Exp)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "ui.rkt") q (analyze (-> Exp MonoStore)) (format-mono-store (-> MonoStore String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/time-adapted.rkt") (c require/typed/check c (u . "time.rkt") q (time-zero Time) (k (Parameterof Natural)) (tick (-> Stx Time Time)) (alloc (-> Time (-> Var Addr))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/denotable-adapted.rkt") (c require/typed/check c (u . "denotable.rkt") q (#:struct State ((call : Exp) (benv : BEnv) (store : Store) (time : Time))) (d-bot Denotable) (d-join (-> Denotable Denotable Denotable)) (empty-store Store) (store-lookup (-> Store Addr Denotable)) (store-update (-> Store Addr Denotable Store)) (store-update* (-> Store (Listof Addr) (Listof Denotable) Store)) (store-join (-> Store Store Store)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/time-adapted.rkt") (c require/typed/check c (u . "time.rkt") q (time-zero Time) (k (Parameterof Natural)) (tick (-> Stx Time Time)) (alloc (-> Time (-> Var Addr))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ui.rkt") (c require/typed/check c (u . "ai.rkt") q (atom-eval (-> BEnv Store (-> Exp Denotable))) (next (-> State (Setof State))) (explore (-> (Setof State) (Listof State) (Setof State))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/time-adapted.rkt") (c require/typed/check c (u . "time.rkt") q (time-zero Time) (k (Parameterof Natural)) (tick (-> Stx Time Time)) (alloc (-> Time (-> Var Addr))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/denotable-adapted.rkt") (c require/typed/check c (u . "denotable.rkt") q (#:struct State ((call : Exp) (benv : BEnv) (store : Store) (time : Time))) (d-bot Denotable) (d-join (-> Denotable Denotable Denotable)) (empty-store Store) (store-lookup (-> Store Addr Denotable)) (store-update (-> Store Addr Denotable Store)) (store-update* (-> Store (Listof Addr) (Listof Denotable) Store)) (store-join (-> Store Store Store)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/time-adapted.rkt") (c require/typed/check c (u . "time.rkt") q (time-zero Time) (k (Parameterof Natural)) (tick (-> Stx Time Time)) (alloc (-> Time (-> Var Addr))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/benv-adapted.rkt") (c require/typed/check c (u . "benv.rkt") q (#:struct Closure ((lam : Lam) (benv : BEnv))) (#:struct Binding ((var : Var) (time : Time))) (empty-benv BEnv) (benv-lookup (-> BEnv Var Addr)) (benv-extend (-> BEnv Var Addr BEnv)) (benv-extend* (-> BEnv (Listof Var) (Listof Addr) BEnv)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/time-adapted.rkt") (c require/typed/check c (u . "time.rkt") q (time-zero Time) (k (Parameterof Natural)) (tick (-> Stx Time Time)) (alloc (-> Time (-> Var Addr))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/denotable-adapted.rkt") (c require/typed/check c (u . "denotable.rkt") q (#:struct State ((call : Exp) (benv : BEnv) (store : Store) (time : Time))) (d-bot Denotable) (d-join (-> Denotable Denotable Denotable)) (empty-store Store) (store-lookup (-> Store Addr Denotable)) (store-update (-> Store Addr Denotable Store)) (store-update* (-> Store (Listof Addr) (Listof Denotable) Store)) (store-join (-> Store Store Store)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ui.rkt") (c require/typed/check c (u . "ai.rkt") q (atom-eval (-> BEnv Store (-> Exp Denotable))) (next (-> State (Setof State))) (explore (-> (Setof State) (Listof State) (Setof State)))))) c (c lnm c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/modulegraph-adapted.rkt") (c require/typed/check c (u . "modulegraph.rkt") q (#:struct modulegraph ((project-name : String) (adjlist : (Listof (Listof String))))) (project-name (-> ModuleGraph String)) (from-tex (-> Path-String ModuleGraph)) (module-names (-> ModuleGraph (Listof String))) (path->project-name (-> Path String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/summary-adapted.rkt") (c require/typed/check c (u . "summary.rkt") q (#:struct summary ((source : Path-String) (dataset : (Vectorof (Listof Index))) (modulegraph : ModuleGraph))) (from-rktd (->* (String) (#:graph (U Path #f)) Summary)) (all-variations (-> Summary (Sequenceof String))) (get-num-variations (-> Summary Index)) (get-project-name (-> Summary String)) (predicate->variations (-> Summary (-> String Boolean) (Sequenceof String))) (untyped-mean (-> Summary Real)) (variation->mean-runtime (-> Summary String Real)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/summary.rkt") (c require/typed/check c (u . "bitstring.rkt") q (bitstring->natural (-> String Index)) (log2 (-> Index Index)) (natural->bitstring (-> Index #:pad Index String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/summary.rkt") (c require/typed/check c (u . "bitstring.rkt") q (bitstring->natural (-> String Index)) (log2 (-> Index Index)) (natural->bitstring (-> Index #:pad Index String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "spreadsheet.rkt") q (rktd->spreadsheet (-> Path-String #:output Path-String #:format Symbol Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/spreadsheet.rkt") (c require/typed/check c (u . "bitstring.rkt") q (log2 (-> Index Index)) (natural->bitstring (-> Index #:pad Index String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/spreadsheet.rkt") (c require/typed/check c (u . "bitstring.rkt") q (log2 (-> Index Index)) (natural->bitstring (-> Index #:pad Index String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "lnm-plot.rkt") q (lnm-plot (-> Summary #:L (Listof Index) #:N Index #:M Index #:max-overhead Index #:cutoff-proportion Float #:num-samples Positive-Integer #:plot-height Positive-Integer #:plot-width Positive-Integer (Listof Any))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lnm-plot.rkt") (c require/typed/check c (u . "bitstring.rkt") q (in-reach (-> String Index (Listof String))) (log2 (-> Index Index)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lnm-plot.rkt") (c require/typed/check c (u . "bitstring.rkt") q (in-reach (-> String Index (Listof String))) (log2 (-> Index Index))))) c (c mbta c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "run-t.rkt") q (EOM String) (run-t (-> String String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/run-t.rkt") (c require/typed/check c (u . "t-view.rkt") q (manage% Manage))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/t-view.rkt") (c require/typed/check c (u . "t-graph.rkt") q (read-t-graph (-> (Instance MBTA))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/t-view.rkt") (c require/typed/check c (u . "t-graph.rkt") q (read-t-graph (-> (Instance MBTA))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/run-t.rkt") (c require/typed/check c (u . "t-view.rkt") q (manage% Manage))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/t-view.rkt") (c require/typed/check c (u . "t-graph.rkt") q (read-t-graph (-> (Instance MBTA))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/t-view.rkt") (c require/typed/check c (u . "t-graph.rkt") q (read-t-graph (-> (Instance MBTA)))))) c (c morsecode c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "morse-code-strings.rkt") q (string->morse (-> String String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/morse-code-strings.rkt") (c require/typed/check c (u . "morse-code-table.rkt") q (char-table (HashTable Char String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/morse-code-strings.rkt") (c require/typed/check c (u . "morse-code-table.rkt") q (char-table (HashTable Char String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "levenshtein.rkt") q (string-levenshtein (String String -> Integer))))) c (c quadBG c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "world.rkt") q (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:quality-default (Parameterof Integer)) (world:draft-quality Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "quad-main.rkt") q (typeset (-> Quad Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "quads.rkt") q (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-car (-> Quad (U String Quad))) (line (->* ((Listof Any)) #:rest USQ Quad)) (quads->column (-> (Listof Quad) Quad)) (quads->page (-> (Listof Quad) Quad)) (quads->block (-> (Listof Quad) Quad)) (quad-has-attr? (-> Quad Symbol Boolean)) (quad-name (-> Quad Symbol)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (quad-list (-> Quad (Listof USQ))) (quad-attrs (-> Quad (Listof Any))) (quads->doc (-> (Listof Quad) Quad)) (page (->* ((Listof Any)) #:rest USQ Quad)) (column (->* ((Listof Any)) #:rest USQ Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "wrap.rkt") q (insert-spacers-in-line (->* (Quad) ((Option Symbol)) Quad)) (wrap-best (->* ((Listof Quad)) (Float) (Listof Quad))) (fill (->* (Quad) ((Option Float)) Quad)) (add-horiz-positions (-> Quad Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Positive-Flonum String) (Font-Weight Font-Style) Float)) (measure-text (-> String Positive-Flonum String Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (optical-kern (->* ((Listof Any)) () #:rest USQ Quad)) (line (->* ((Listof Any)) () #:rest USQ Quad)) (optical-kern? (-> Any Boolean)) (piece (->* ((Listof Any)) () #:rest USQ Quad)) (word-break (->* ((Listof Any)) () #:rest USQ Quad)) (quad->string (-> Quad String)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (quad-attrs (-> Quad (Listof Any))) (quad-has-attr? (-> Quad Symbol Boolean)) (quad-list (Quad -> (Listof USQ))) (quad-name (Quad -> Symbol)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quads->line (-> (Listof Quad) Quad)) (spacer (->* ((Listof Any)) () #:rest USQ Quad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof (Listof (U (quote bb) (quote nb) String)))) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key Symbol) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof Float)) (world:measure-key Symbol) (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key Symbol) (world:total-lines-key Symbol) (world:horiz-alignment-last-line-key Symbol) (world:horiz-alignment-key Symbol) (world:horiz-alignment-default (Parameterof Symbol)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs (Listof Any) -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs Symbol * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree (QEXP -> (Listof Quad))) (merge-attrs (QuadAttrs * -> QuadAttrs)) (group-quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-set (Quad Symbol Any -> Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Positive-Flonum String) (Font-Weight Font-Style) Float)) (measure-text (-> String Positive-Flonum String Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (optical-kern (->* ((Listof Any)) () #:rest USQ Quad)) (line (->* ((Listof Any)) () #:rest USQ Quad)) (optical-kern? (-> Any Boolean)) (piece (->* ((Listof Any)) () #:rest USQ Quad)) (word-break (->* ((Listof Any)) () #:rest USQ Quad)) (quad->string (-> Quad String)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (quad-attrs (-> Quad (Listof Any))) (quad-has-attr? (-> Quad Symbol Boolean)) (quad-list (Quad -> (Listof USQ))) (quad-name (Quad -> Symbol)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quads->line (-> (Listof Quad) Quad)) (spacer (->* ((Listof Any)) () #:rest USQ Quad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof (Listof (U (quote bb) (quote nb) String)))) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key Symbol) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof Float)) (world:measure-key Symbol) (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key Symbol) (world:total-lines-key Symbol) (world:horiz-alignment-last-line-key Symbol) (world:horiz-alignment-key Symbol) (world:horiz-alignment-default (Parameterof Symbol)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs (Listof Any) -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs Symbol * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree (QEXP -> (Listof Quad))) (merge-attrs (QuadAttrs * -> QuadAttrs)) (group-quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-set (Quad Symbol Any -> Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "world.rkt") q (world:line-looseness-key Symbol) (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:line-looseness-tolerance Float) (world:line-index-key Symbol) (world:measure-key Symbol) (world:use-hyphenation? Boolean) (world:max-quality Index) (world:total-lines-key Symbol) (world:draft-quality Index) (world:quality-key Symbol) (world:quality-key-default (Parameterof Integer)) (world:paper-width-default (Parameterof Float)) (world:column-count-key Symbol) (world:column-count-key-default (Parameterof Integer)) (world:column-gutter-key Symbol) (world:column-gutter-key-default (Parameterof Float)) (world:column-index-key Symbol) (world:min-first-lines Index) (world:min-last-lines Index) (world:minimum-lines-per-column Index) (world:default-lines-per-column Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)) (load-text-cache-file (-> Void)) (update-text-cache-file (-> Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "utils.rkt") q (add-vert-positions (-> Quad Quad)) (attr-change (-> QuadAttrs (Listof Any) QuadAttrs)) (compute-line-height (-> Quad Quad)) (hyphenate-quad (USQ -> USQ)) (join-quads ((Listof Quad) -> (Listof Quad))) (merge-attrs (QuadAttrs * -> QuadAttrs)) (quad-attr-set* (Quad (Listof Any) -> Quad)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (split-quad (-> Quad (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (slice-at (All (A) (case-> ((Listof A) Positive-Integer -> (Listof (Listof A))) ((Listof A) Positive-Integer Boolean -> (Listof (Listof A)))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "../base/csp/csp.rkt") q (problem% (Class (init-field (solver Any)) (field (_solver Any)) (field (_variable-domains Any)) (field (_constraints Any)) (reset (-> Void)) (custom-print (Output-Port Integer -> Void)) (custom-display (Output-Port -> Void)) (custom-write (Output-Port -> Void)) (add-variable (-> Any (Listof Any) Void)) (add-variables (-> (Listof Any) Any Void)) (add-constraint (-> (-> Index Boolean) (Listof Any) Void)) (get-solution (-> HashTableTop)) (get-solutions (-> (Listof (HashTable String Integer)))) (get-solution-iter (-> HashTableTop)) (set-solver (-> Any Void)) (get-solver (-> Any)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "quads.rkt") q (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-car (-> Quad (U String Quad))) (line (->* ((Listof Any)) #:rest USQ Quad)) (quads->column (-> (Listof Quad) Quad)) (quads->page (-> (Listof Quad) Quad)) (quads->block (-> (Listof Quad) Quad)) (quad-has-attr? (-> Quad Symbol Boolean)) (quad-name (-> Quad Symbol)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (quad-list (-> Quad (Listof USQ))) (quad-attrs (-> Quad (Listof Any))) (quads->doc (-> (Listof Quad) Quad)) (page (->* ((Listof Any)) #:rest USQ Quad)) (column (->* ((Listof Any)) #:rest USQ Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "wrap.rkt") q (insert-spacers-in-line (->* (Quad) ((Option Symbol)) Quad)) (wrap-best (->* ((Listof Quad)) (Float) (Listof Quad))) (fill (->* (Quad) ((Option Float)) Quad)) (add-horiz-positions (-> Quad Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Positive-Flonum String) (Font-Weight Font-Style) Float)) (measure-text (-> String Positive-Flonum String Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (optical-kern (->* ((Listof Any)) () #:rest USQ Quad)) (line (->* ((Listof Any)) () #:rest USQ Quad)) (optical-kern? (-> Any Boolean)) (piece (->* ((Listof Any)) () #:rest USQ Quad)) (word-break (->* ((Listof Any)) () #:rest USQ Quad)) (quad->string (-> Quad String)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (quad-attrs (-> Quad (Listof Any))) (quad-has-attr? (-> Quad Symbol Boolean)) (quad-list (Quad -> (Listof USQ))) (quad-name (Quad -> Symbol)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quads->line (-> (Listof Quad) Quad)) (spacer (->* ((Listof Any)) () #:rest USQ Quad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof (Listof (U (quote bb) (quote nb) String)))) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key Symbol) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof Float)) (world:measure-key Symbol) (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key Symbol) (world:total-lines-key Symbol) (world:horiz-alignment-last-line-key Symbol) (world:horiz-alignment-key Symbol) (world:horiz-alignment-default (Parameterof Symbol)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs (Listof Any) -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs Symbol * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree (QEXP -> (Listof Quad))) (merge-attrs (QuadAttrs * -> QuadAttrs)) (group-quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-set (Quad Symbol Any -> Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Positive-Flonum String) (Font-Weight Font-Style) Float)) (measure-text (-> String Positive-Flonum String Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (optical-kern (->* ((Listof Any)) () #:rest USQ Quad)) (line (->* ((Listof Any)) () #:rest USQ Quad)) (optical-kern? (-> Any Boolean)) (piece (->* ((Listof Any)) () #:rest USQ Quad)) (word-break (->* ((Listof Any)) () #:rest USQ Quad)) (quad->string (-> Quad String)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (quad-attrs (-> Quad (Listof Any))) (quad-has-attr? (-> Quad Symbol Boolean)) (quad-list (Quad -> (Listof USQ))) (quad-name (Quad -> Symbol)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quads->line (-> (Listof Quad) Quad)) (spacer (->* ((Listof Any)) () #:rest USQ Quad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof (Listof (U (quote bb) (quote nb) String)))) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key Symbol) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof Float)) (world:measure-key Symbol) (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key Symbol) (world:total-lines-key Symbol) (world:horiz-alignment-last-line-key Symbol) (world:horiz-alignment-key Symbol) (world:horiz-alignment-default (Parameterof Symbol)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs (Listof Any) -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs Symbol * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree (QEXP -> (Listof Quad))) (merge-attrs (QuadAttrs * -> QuadAttrs)) (group-quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-remove* (Quad Symbol * -> Quad)) (quad-attr-set (Quad Symbol Any -> Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (-> QuadAttrs String Quad)) (quad-name (-> Quad Symbol)) (quad-attrs (-> Quad (Listof Any))) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (-> Quad (Listof USQ))) (box (-> (Listof Any) Quad)) (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key Symbol) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "world.rkt") q (world:line-looseness-key Symbol) (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:line-looseness-tolerance Float) (world:line-index-key Symbol) (world:measure-key Symbol) (world:use-hyphenation? Boolean) (world:max-quality Index) (world:total-lines-key Symbol) (world:draft-quality Index) (world:quality-key Symbol) (world:quality-key-default (Parameterof Integer)) (world:paper-width-default (Parameterof Float)) (world:column-count-key Symbol) (world:column-count-key-default (Parameterof Integer)) (world:column-gutter-key Symbol) (world:column-gutter-key-default (Parameterof Float)) (world:column-index-key Symbol) (world:min-first-lines Index) (world:min-last-lines Index) (world:minimum-lines-per-column Index) (world:default-lines-per-column Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)) (load-text-cache-file (-> Void)) (update-text-cache-file (-> Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "utils.rkt") q (add-vert-positions (-> Quad Quad)) (attr-change (-> QuadAttrs (Listof Any) QuadAttrs)) (compute-line-height (-> Quad Quad)) (hyphenate-quad (USQ -> USQ)) (join-quads ((Listof Quad) -> (Listof Quad))) (merge-attrs (QuadAttrs * -> QuadAttrs)) (quad-attr-set* (Quad (Listof Any) -> Quad)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (split-quad (-> Quad (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (slice-at (All (A) (case-> ((Listof A) Positive-Integer -> (Listof (Listof A))) ((Listof A) Positive-Integer Boolean -> (Listof (Listof A)))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "../base/csp/csp.rkt") q (problem% (Class (init-field (solver Any)) (field (_solver Any)) (field (_variable-domains Any)) (field (_constraints Any)) (reset (-> Void)) (custom-print (Output-Port Integer -> Void)) (custom-display (Output-Port -> Void)) (custom-write (Output-Port -> Void)) (add-variable (-> Any (Listof Any) Void)) (add-variables (-> (Listof Any) Any Void)) (add-constraint (-> (-> Index Boolean) (Listof Any) Void)) (get-solution (-> HashTableTop)) (get-solutions (-> (Listof (HashTable String Integer)))) (get-solution-iter (-> HashTableTop)) (set-solver (-> Any Void)) (get-solver (-> Any)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "quick-sample.rkt") q (quick-sample (-> Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quick-sample.rkt") (c require/typed/check c (u . "quads.rkt") q (block (->* (QuadAttrs) #:rest USQ Quad)) (block-break (-> QuadAttrs Quad)) (box (->* (QuadAttrs) #:rest USQ Quad)) (column-break (-> Quad)) (page-break (-> Quad)) (word (-> QuadAttrs String Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quick-sample.rkt") (c require/typed/check c (u . "quads.rkt") q (block (->* (QuadAttrs) #:rest USQ Quad)) (block-break (-> QuadAttrs Quad)) (box (->* (QuadAttrs) #:rest USQ Quad)) (column-break (-> Quad)) (page-break (-> Quad)) (word (-> QuadAttrs String Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "render.rkt") q (pdf-renderer% (Class (render-to-file (Quad Path-String -> Void)) (render-element (Quad -> Any)) (render-page ((Listof Quad) -> Void)) (render-word (Quad -> Any)) (render (-> Quad Any)) (finalize (-> Any Any)) (setup (-> Quad Quad)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-color-key Symbol) (world:font-color-default (Parameterof String)) (world:font-background-key Symbol) (world:font-background-default (Parameterof String)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:paper-height-default (Parameterof Float)) (world:paper-width-default (Parameterof Float)) (world:x-position-key Symbol) (world:y-position-key Symbol) (world:ascent-key Symbol) (world:quality-default (Parameterof Integer)) (world:draft-quality Index) (world:page-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "utils.rkt") q (flatten-quad (-> Quad (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "quads.rkt") q (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (word (->* ((Listof Any)) Quad)) (quad-name (-> Quad Symbol)) (quad-car (-> Quad USQ)) (whitespace/nbsp? (-> Any Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key Symbol) (world:font-size-default (Parameterof Float)) (world:font-color-key Symbol) (world:font-color-default (Parameterof String)) (world:font-background-key Symbol) (world:font-background-default (Parameterof String)) (world:font-name-key Symbol) (world:font-name-default (Parameterof String)) (world:font-weight-key Symbol) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key Symbol) (world:font-style-default (Parameterof Font-Style)) (world:paper-height-default (Parameterof Float)) (world:paper-width-default (Parameterof Float)) (world:x-position-key Symbol) (world:y-position-key Symbol) (world:ascent-key Symbol) (world:quality-default (Parameterof Integer)) (world:draft-quality Index) (world:page-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "utils.rkt") q (flatten-quad (-> Quad (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "quads.rkt") q (quad-attr-ref (->* ((U Quad QuadAttrs) Symbol) (Any) Any)) (word (->* ((Listof Any)) Quad)) (quad-name (-> Quad Symbol)) (quad-car (-> Quad USQ)) (whitespace/nbsp? (-> Any Boolean))))) c (c quadMB c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "world.rkt") q (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:quality-default (Parameterof Index)) (world:draft-quality Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "quad-main.rkt") q (typeset (-> Quad DocQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "quads.rkt") q (quads->doc (-> (Listof Quad) DocQuad)) (quads->page (-> (Listof Quad) PageQuad)) (quads->block (-> (Listof Quad) BlockQuad)) (quad-attrs (Quad -> QuadAttrs)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (quad-car (-> Quad QuadListItem)) (quad-name (-> Quad QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (quad-has-attr? (Quad QuadAttrKey -> Boolean)) (quads->column (-> (Listof Quad) ColumnQuad)) (page (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PageQuad)) (column (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem ColumnQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "wrap.rkt") q (insert-spacers-in-line (->* (LineQuad) ((Option Symbol)) LineQuad)) (wrap-adaptive (->* ((Listof Quad)) (Float) (Listof LineQuad))) (wrap-best (->* ((Listof Quad)) (Float) (Listof LineQuad))) (wrap-first (->* ((Listof Quad)) (Float) (Listof LineQuad))) (fill (->* (LineQuad) ((Option Float)) LineQuad)) (add-horiz-positions (-> GroupQuad GroupQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Font-Size Font-Name) (Font-Weight Font-Style) Float)) (measure-text (-> String Font-Size Font-Name Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (quads->line (-> (Listof Quad) LineQuad)) (quad-attrs (-> Quad QuadAttrs)) (quad-name (Quad -> QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (quad->string (-> Quad String)) (optical-kern (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Optical-KernQuad)) (word-break (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Word-BreakQuad)) (piece (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PieceQuad)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (spacer (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem SpacerQuad)) (quad-has-attr? (-> Quad QuadAttrKey Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof JoinableType)) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key QuadAttrKey) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof QuadAttrValue)) (world:measure-key QuadAttrKey) (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key QuadAttrKey) (world:total-lines-key QuadAttrKey) (world:horiz-alignment-last-line-key QuadAttrKey) (world:horiz-alignment-key QuadAttrKey) (world:horiz-alignment-default (Parameterof QuadAttrKey)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs HashableList -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs QuadAttrKey * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree ((Treeof Quad) -> (Listof Quad))) (merge-attrs (JoinableType * -> QuadAttrs)) (group-quad-attr-remove* (GroupQuad QuadAttrKey * -> GroupQuad)) (quad-attr-remove* (Quad QuadAttrKey * -> Quad)) (quad-attr-set (Quad QuadAttrKey QuadAttrValue -> Quad)) (group-quad-attr-set (GroupQuad QuadAttrKey QuadAttrValue -> GroupQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Font-Size Font-Name) (Font-Weight Font-Style) Float)) (measure-text (-> String Font-Size Font-Name Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (quads->line (-> (Listof Quad) LineQuad)) (quad-attrs (-> Quad QuadAttrs)) (quad-name (Quad -> QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (quad->string (-> Quad String)) (optical-kern (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Optical-KernQuad)) (word-break (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Word-BreakQuad)) (piece (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PieceQuad)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (spacer (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem SpacerQuad)) (quad-has-attr? (-> Quad QuadAttrKey Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof JoinableType)) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key QuadAttrKey) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof QuadAttrValue)) (world:measure-key QuadAttrKey) (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key QuadAttrKey) (world:total-lines-key QuadAttrKey) (world:horiz-alignment-last-line-key QuadAttrKey) (world:horiz-alignment-key QuadAttrKey) (world:horiz-alignment-default (Parameterof QuadAttrKey)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs HashableList -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs QuadAttrKey * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree ((Treeof Quad) -> (Listof Quad))) (merge-attrs (JoinableType * -> QuadAttrs)) (group-quad-attr-remove* (GroupQuad QuadAttrKey * -> GroupQuad)) (quad-attr-remove* (Quad QuadAttrKey * -> Quad)) (quad-attr-set (Quad QuadAttrKey QuadAttrValue -> Quad)) (group-quad-attr-set (GroupQuad QuadAttrKey QuadAttrValue -> GroupQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "world.rkt") q (world:line-looseness-key Symbol) (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:line-looseness-tolerance Float) (world:line-index-key Symbol) (world:measure-key QuadAttrKey) (world:use-hyphenation? Boolean) (world:max-quality Index) (world:total-lines-key Symbol) (world:draft-quality Index) (world:quality-key QuadAttrKey) (world:quality-key-default (Parameterof Index)) (world:paper-width-default (Parameterof Float)) (world:column-count-key QuadAttrKey) (world:column-count-key-default (Parameterof Index)) (world:column-gutter-key QuadAttrKey) (world:column-gutter-key-default (Parameterof Float)) (world:column-index-key QuadAttrKey) (world:min-first-lines Index) (world:min-last-lines Index) (world:minimum-lines-per-column Index) (world:default-lines-per-column Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)) (load-text-cache-file (-> Void)) (update-text-cache-file (-> Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "utils.rkt") q (merge-attrs (JoinableType * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (join-quads ((Listof Quad) -> (Listof Quad))) (hyphenate-quad (QuadListItem -> QuadListItem)) (quad-map ((QuadListItem -> QuadListItem) Quad -> Quad)) (group-quad-attr-set* (GroupQuad HashableList -> GroupQuad)) (quad-attr-set* (Quad HashableList -> Quad)) (attr-change (-> QuadAttrs HashableList QuadAttrs)) (compute-line-height (-> Quad Quad)) (add-vert-positions (-> GroupQuad GroupQuad)) (split-quad (-> Quad (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (slice-at (All (A) (case-> ((Listof A) Positive-Integer -> (Listof (Listof A))) ((Listof A) Positive-Integer Boolean -> (Listof (Listof A)))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "quads.rkt") q (quads->doc (-> (Listof Quad) DocQuad)) (quads->page (-> (Listof Quad) PageQuad)) (quads->block (-> (Listof Quad) BlockQuad)) (quad-attrs (Quad -> QuadAttrs)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (quad-car (-> Quad QuadListItem)) (quad-name (-> Quad QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (quad-has-attr? (Quad QuadAttrKey -> Boolean)) (quads->column (-> (Listof Quad) ColumnQuad)) (page (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PageQuad)) (column (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem ColumnQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "wrap.rkt") q (insert-spacers-in-line (->* (LineQuad) ((Option Symbol)) LineQuad)) (wrap-adaptive (->* ((Listof Quad)) (Float) (Listof LineQuad))) (wrap-best (->* ((Listof Quad)) (Float) (Listof LineQuad))) (wrap-first (->* ((Listof Quad)) (Float) (Listof LineQuad))) (fill (->* (LineQuad) ((Option Float)) LineQuad)) (add-horiz-positions (-> GroupQuad GroupQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Font-Size Font-Name) (Font-Weight Font-Style) Float)) (measure-text (-> String Font-Size Font-Name Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (quads->line (-> (Listof Quad) LineQuad)) (quad-attrs (-> Quad QuadAttrs)) (quad-name (Quad -> QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (quad->string (-> Quad String)) (optical-kern (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Optical-KernQuad)) (word-break (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Word-BreakQuad)) (piece (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PieceQuad)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (spacer (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem SpacerQuad)) (quad-has-attr? (-> Quad QuadAttrKey Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof JoinableType)) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key QuadAttrKey) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof QuadAttrValue)) (world:measure-key QuadAttrKey) (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key QuadAttrKey) (world:total-lines-key QuadAttrKey) (world:horiz-alignment-last-line-key QuadAttrKey) (world:horiz-alignment-key QuadAttrKey) (world:horiz-alignment-default (Parameterof QuadAttrKey)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs HashableList -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs QuadAttrKey * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree ((Treeof Quad) -> (Listof Quad))) (merge-attrs (JoinableType * -> QuadAttrs)) (group-quad-attr-remove* (GroupQuad QuadAttrKey * -> GroupQuad)) (quad-attr-remove* (Quad QuadAttrKey * -> Quad)) (quad-attr-set (Quad QuadAttrKey QuadAttrValue -> Quad)) (group-quad-attr-set (GroupQuad QuadAttrKey QuadAttrValue -> GroupQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ocm-struct-adapted.rkt") (c require/typed/check c (u . "ocm-struct.rkt") q (set-$ocm-tentative! (-> $ocm Index-Type Void)) (set-$ocm-min-entrys! (-> $ocm (Vectorof Entry-Type) Void)) (set-$ocm-min-row-indices! (-> $ocm (Vectorof (U Index-Type No-Value-Type)) Void)) (set-$ocm-finished! (-> $ocm Finished-Value-Type Void)) (set-$ocm-base! (-> $ocm Index-Type Void)) (#:struct $ocm ((min-entrys : (Vectorof Entry-Type)) (min-row-indices : (Vectorof (U Index-Type No-Value-Type))) (finished : Finished-Value-Type) (matrix-proc : Matrix-Proc-Type) (entry->value : Entry->Value-Type) (base : Index-Type) (tentative : Index-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/penalty-struct-adapted.rkt") (c require/typed/check c (u . "penalty-struct.rkt") q (#:struct $penalty ((hyphens : Nonnegative-Integer) (width : Value-Type))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "measure.rkt") q (measure-ascent (->* (String Font-Size Font-Name) (Font-Weight Font-Style) Float)) (measure-text (-> String Font-Size Font-Name Font-Weight Font-Style Float)) (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "quads.rkt") q (quads->line (-> (Listof Quad) LineQuad)) (quad-attrs (-> Quad QuadAttrs)) (quad-name (Quad -> QuadName)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (quad->string (-> Quad String)) (optical-kern (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Optical-KernQuad)) (word-break (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem Word-BreakQuad)) (piece (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem PieceQuad)) (line (->* ((U QuadAttrs HashableList)) () #:rest GroupQuadListItem LineQuad)) (whitespace/nbsp? (-> Any Boolean)) (whitespace? (-> Any Boolean)) (word-string (-> Quad String)) (group-quad-list (GroupQuad -> GroupQuadList)) (quad-list (Quad -> QuadList)) (spacer (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem SpacerQuad)) (quad-has-attr? (-> Quad QuadAttrKey Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "world.rkt") q (world:last-line-can-be-short Boolean) (world:new-line-penalty Index) (world:hyphen-penalty Index) (world:hyphen-limit Index) (world:allowed-overfull-ratio Float) (world:line-looseness-key Symbol) (world:ascent-key Symbol) (world:optical-overhang (Parameterof Float)) (world:hanging-chars (Listof String)) (world:use-optical-kerns? Boolean) (world:before-break-key Symbol) (world:default-word-break-list (Parameterof JoinableType)) (world:no-break-key Symbol) (world:word-break-key Symbol) (world:spaces (Listof String)) (world:empty-string String) (world:hyphens-and-dashes (Listof String)) (world:soft-hyphen Char) (world:unbreakable-key QuadAttrKey) (world:minimum-last-line-chars Index) (world:measure-default (Parameterof QuadAttrValue)) (world:measure-key QuadAttrKey) (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:line-index-key QuadAttrKey) (world:total-lines-key QuadAttrKey) (world:horiz-alignment-last-line-key QuadAttrKey) (world:horiz-alignment-key QuadAttrKey) (world:horiz-alignment-default (Parameterof QuadAttrKey)) (world:width-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "utils.rkt") q (attr-change (QuadAttrs HashableList -> QuadAttrs)) (join-quads ((Listof Quad) -> (Listof Quad))) (attr-delete (QuadAttrs QuadAttrKey * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (flatten-quadtree ((Treeof Quad) -> (Listof Quad))) (merge-attrs (JoinableType * -> QuadAttrs)) (group-quad-attr-remove* (GroupQuad QuadAttrKey * -> GroupQuad)) (quad-attr-remove* (Quad QuadAttrKey * -> Quad)) (quad-attr-set (Quad QuadAttrKey QuadAttrValue -> Quad)) (group-quad-attr-set (GroupQuad QuadAttrKey QuadAttrValue -> GroupQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "hyphenate.rkt") q (hyphenate (->* (String) ((U Char String) #:exceptions (Listof String) #:min-length Index #:min-left-length Index #:min-right-length Index #:omit-word (-> String Boolean) #:omit-string (-> String Boolean)) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "quads.rkt") q (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-name (-> Quad QuadName)) (quad-attrs (-> Quad QuadAttrs)) (make-quadattrs (-> (Listof Any) QuadAttrs)) (quad-list (Quad -> QuadList)) (group-quad-list (GroupQuad -> GroupQuadList)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (whitespace/nbsp? (-> Any Boolean)) (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/utils.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Float)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:mergeable-quad-types (Listof Symbol)) (world:leading-key QuadAttrKey) (world:leading-key-default (Parameterof Float)) (world:height-key Symbol) (world:split-quad-key Symbol) (world:x-position-key Symbol) (world:y-position-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "ocm.rkt") q (make-ocm (->* (Matrix-Proc-Type Entry->Value-Type) (Entry-Type) OCM-Type)) (ocm-min-index (OCM-Type Index-Type -> (U Index-Type No-Value-Type))) (ocm-min-entry (OCM-Type Index-Type -> Entry-Type)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/wrap.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (shifts (-> (Listof Quad) (Listof Integer) (Listof (Listof (Option Quad))))) (slicef-after (All (A) ((Listof A) (A -> Boolean) -> (Listof (Listof A))))) (break-at (All (A) ((Listof A) (U Nonnegative-Integer (Listof Nonnegative-Integer)) -> (Listof (Listof A))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "world.rkt") q (world:line-looseness-key Symbol) (world:allow-hyphenated-last-word-in-paragraph Boolean) (world:line-looseness-tolerance Float) (world:line-index-key Symbol) (world:measure-key QuadAttrKey) (world:use-hyphenation? Boolean) (world:max-quality Index) (world:total-lines-key Symbol) (world:draft-quality Index) (world:quality-key QuadAttrKey) (world:quality-key-default (Parameterof Index)) (world:paper-width-default (Parameterof Float)) (world:column-count-key QuadAttrKey) (world:column-count-key-default (Parameterof Index)) (world:column-gutter-key QuadAttrKey) (world:column-gutter-key-default (Parameterof Float)) (world:column-index-key QuadAttrKey) (world:min-first-lines Index) (world:min-last-lines Index) (world:minimum-lines-per-column Index) (world:default-lines-per-column Index))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "measure.rkt") q (round-float (-> Float Float)) (load-text-cache-file (-> Void)) (update-text-cache-file (-> Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "utils.rkt") q (merge-attrs (JoinableType * -> QuadAttrs)) (split-last (All (A) ((Listof A) -> (values (Listof A) A)))) (join-quads ((Listof Quad) -> (Listof Quad))) (hyphenate-quad (QuadListItem -> QuadListItem)) (quad-map ((QuadListItem -> QuadListItem) Quad -> Quad)) (group-quad-attr-set* (GroupQuad HashableList -> GroupQuad)) (quad-attr-set* (Quad HashableList -> Quad)) (attr-change (-> QuadAttrs HashableList QuadAttrs)) (compute-line-height (-> Quad Quad)) (add-vert-positions (-> GroupQuad GroupQuad)) (split-quad (-> Quad (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quad-main.rkt") (c require/typed/check c (u . "sugar-list.rkt") q (slice-at (All (A) (case-> ((Listof A) Positive-Integer -> (Listof (Listof A))) ((Listof A) Positive-Integer Boolean -> (Listof (Listof A)))))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "quick-sample.rkt") q (quick-sample (-> Quad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quick-sample.rkt") (c require/typed/check c (u . "quads.rkt") q (page-break (-> Page-BreakQuad)) (column-break (-> Column-BreakQuad)) (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (block (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BlockQuad)) (block-break (->* ((U HashableList QuadAttrs)) () #:rest QuadListItem Block-BreakQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/quick-sample.rkt") (c require/typed/check c (u . "quads.rkt") q (page-break (-> Page-BreakQuad)) (column-break (-> Column-BreakQuad)) (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (box (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BoxQuad)) (block (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem BlockQuad)) (block-break (->* ((U HashableList QuadAttrs)) () #:rest QuadListItem Block-BreakQuad)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "render.rkt") q (pdf-renderer% (Class (render-to-file (Quad Path-String -> Void)) (render-element (Quad -> Any)) (render-page ((Listof Quad) -> Void)) (render-word (Quad -> Any)) (render (-> Quad Any)) (finalize (-> Any Any)) (setup (-> Quad Quad)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-color-key QuadAttrKey) (world:font-color-default (Parameterof String)) (world:font-background-key QuadAttrKey) (world:font-background-default (Parameterof String)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:paper-height-default (Parameterof Float)) (world:paper-width-default (Parameterof Float)) (world:x-position-key Symbol) (world:y-position-key Symbol) (world:ascent-key Symbol) (world:quality-default (Parameterof Index)) (world:draft-quality Index) (world:page-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "utils.rkt") q (flatten-quad (Quad -> (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "quads.rkt") q (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-car (-> Quad QuadListItem)) (whitespace/nbsp? (-> Any Boolean)) (quad-name (-> Quad QuadName)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "world.rkt") q (world:font-size-key QuadAttrKey) (world:font-size-default (Parameterof Positive-Flonum)) (world:font-color-key QuadAttrKey) (world:font-color-default (Parameterof String)) (world:font-background-key QuadAttrKey) (world:font-background-default (Parameterof String)) (world:font-name-key QuadAttrKey) (world:font-name-default (Parameterof Font-Name)) (world:font-weight-key QuadAttrKey) (world:font-weight-default (Parameterof Font-Weight)) (world:font-style-key QuadAttrKey) (world:font-style-default (Parameterof Font-Style)) (world:paper-height-default (Parameterof Float)) (world:paper-width-default (Parameterof Float)) (world:x-position-key Symbol) (world:y-position-key Symbol) (world:ascent-key Symbol) (world:quality-default (Parameterof Index)) (world:draft-quality Index) (world:page-key Symbol))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "utils.rkt") q (flatten-quad (Quad -> (Listof Quad))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/render.rkt") (c require/typed/check c (u . "quads.rkt") q (quad-attr-ref (->* ((U Quad QuadAttrs) QuadAttrKey) (QuadAttrValue) QuadAttrValue)) (word (->* ((U QuadAttrs HashableList)) () #:rest QuadListItem WordQuad)) (quad-car (-> Quad QuadListItem)) (whitespace/nbsp? (-> Any Boolean)) (quad-name (-> Quad QuadName))))) c (c sieve c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "streams.rkt") q (#:struct stream ((first : Natural) (rest : (-> stream)))) (make-stream (-> Natural (-> stream) stream)) (stream-unfold (-> stream (values Natural stream))) (stream-get (-> stream Natural Natural)) (stream-take (-> stream Natural (Listof Natural)))))) c (c snake c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/data-adaptor.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct posn ((x : Real) (y : Real))) (#:struct snake ((dir : Dir) (segs : (NEListof Posn)))) (#:struct world ((snake : Snake) (food : Posn))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "const.rkt") q (WORLD (-> World)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "motion.rkt") q (reset! (-> Void)) (world->world (-> World World)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion.rkt") (c require/typed/check c (u . "const.rkt") q (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion.rkt") (c require/typed/check c (u . "motion-help.rkt") q (snake-slither (-> Snake Snake)) (snake-grow (-> Snake Snake)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion-help.rkt") (c require/typed/check c (u . "cut-tail.rkt") q (cut-tail (-> (NEListof Posn) (Listof Posn))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion-help.rkt") (c require/typed/check c (u . "cut-tail.rkt") q (cut-tail (-> (NEListof Posn) (Listof Posn))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion.rkt") (c require/typed/check c (u . "const.rkt") q (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion.rkt") (c require/typed/check c (u . "motion-help.rkt") q (snake-slither (-> Snake Snake)) (snake-grow (-> Snake Snake)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion-help.rkt") (c require/typed/check c (u . "cut-tail.rkt") q (cut-tail (-> (NEListof Posn) (Listof Posn))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/motion-help.rkt") (c require/typed/check c (u . "cut-tail.rkt") q (cut-tail (-> (NEListof Posn) (Listof Posn))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "handlers.rkt") q (handle-key (-> World String World)) (game-over? (-> World Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/handlers.rkt") (c require/typed/check c (u . "collide.rkt") q (snake-wall-collide? (-> Snake Boolean)) (snake-self-collide? (-> Snake Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "const.rkt") q (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "const.rkt") q (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/handlers.rkt") (c require/typed/check c (u . "motion.rkt") q (world-change-dir (-> World Dir World)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/handlers.rkt") (c require/typed/check c (u . "collide.rkt") q (snake-wall-collide? (-> Snake Boolean)) (snake-self-collide? (-> Snake Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "const.rkt") q (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "const.rkt") q (BOARD-WIDTH Integer) (BOARD-HEIGHT Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/collide.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/handlers.rkt") (c require/typed/check c (u . "motion.rkt") q (world-change-dir (-> World Dir World))))) c (c suffixtree c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "lcs.rkt") q (longest-common-substring (-> String String String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lcs.rkt") (c require/typed/check c (u . "label.rkt") q (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-source-eq? (-> Label Label Boolean)) (label-length (-> Label Index)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (label-ref (-> Label Integer (U Symbol Char))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lcs.rkt") (c require/typed/check c (u . "structs.rkt") q (make-tree (-> Tree)) (tree-root (-> Tree Node)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs.rkt") (c require/typed/check c (u . "label.rkt") q (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-element-equal? (-> Any Any Boolean)) (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))) (label-copy (-> Label Label)) (label-ref-at-end? (-> Label Integer Boolean)) (label->string (-> Label String)) (label-source-eq? (-> Label Label Boolean)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (vector->label/with-sentinel (-> (Vectorof Char) Label)) (label-same-source? (-> Label Label Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs.rkt") (c require/typed/check c (u . "label.rkt") q (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-element-equal? (-> Any Any Boolean)) (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))) (label-copy (-> Label Label)) (label-ref-at-end? (-> Label Integer Boolean)) (label->string (-> Label String)) (label-source-eq? (-> Label Label Boolean)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (vector->label/with-sentinel (-> (Vectorof Char) Label)) (label-same-source? (-> Label Label Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lcs.rkt") (c require/typed/check c (u . "ukkonen.rkt") q (tree-add! (-> Tree Label Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "label.rkt") q (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (label-element-equal? (-> Any Any Boolean)) (label-source-eq? (-> Label Label Boolean)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "structs.rkt") q (new-suffix-tree (-> Tree)) (node-find-child (-> Node Any (U Node #f))) (node-root? (-> Node Boolean)) (node-position-at-end? (-> Node Index Boolean)) (node-add-leaf! (-> Node Label Node)) (node-up-splice-leaf! (-> Node Index Label (values Node Node))) (node-follow/k (-> Node Label (-> Node (Pairof Node Index)) (-> Node Index (Pairof Node Index)) (-> Node Label Index (Pairof Node Index)) (-> Node Index Label Index (Pairof Node Index)) (Pairof Node Index))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs.rkt") (c require/typed/check c (u . "label.rkt") q (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-element-equal? (-> Any Any Boolean)) (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))) (label-copy (-> Label Label)) (label-ref-at-end? (-> Label Integer Boolean)) (label->string (-> Label String)) (label-source-eq? (-> Label Label Boolean)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (vector->label/with-sentinel (-> (Vectorof Char) Label)) (label-same-source? (-> Label Label Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs.rkt") (c require/typed/check c (u . "label.rkt") q (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-element-equal? (-> Any Any Boolean)) (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))) (label-copy (-> Label Label)) (label-ref-at-end? (-> Label Integer Boolean)) (label->string (-> Label String)) (label-source-eq? (-> Label Label Boolean)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (vector->label/with-sentinel (-> (Vectorof Char) Label)) (label-same-source? (-> Label Label Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "label.rkt") q (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (label-element-equal? (-> Any Any Boolean)) (label-source-eq? (-> Label Label Boolean)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "structs.rkt") q (new-suffix-tree (-> Tree)) (node-find-child (-> Node Any (U Node #f))) (node-root? (-> Node Boolean)) (node-position-at-end? (-> Node Index Boolean)) (node-add-leaf! (-> Node Label Node)) (node-up-splice-leaf! (-> Node Index Label (values Node Node))) (node-follow/k (-> Node Label (-> Node (Pairof Node Index)) (-> Node Index (Pairof Node Index)) (-> Node Label Index (Pairof Node Index)) (-> Node Index Label Index (Pairof Node Index)) (Pairof Node Index))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs.rkt") (c require/typed/check c (u . "label.rkt") q (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-element-equal? (-> Any Any Boolean)) (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))) (label-copy (-> Label Label)) (label-ref-at-end? (-> Label Integer Boolean)) (label->string (-> Label String)) (label-source-eq? (-> Label Label Boolean)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (vector->label/with-sentinel (-> (Vectorof Char) Label)) (label-same-source? (-> Label Label Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct label ((datum : (Vectorof (U Char Symbol))) (i : Natural) (j : Natural))) (make-label (-> (Vectorof (U Char Symbol)) Natural Natural Label)) (set-label-i! (-> Label Natural Void)) (set-label-j! (-> Label Natural Void)) (#:struct node ((up-label : Label) (parent : (U #f Node)) (children : (Listof Node)) (suffix-link : (U #f Node)))) (make-suffix-tree (-> Node Tree)) (make-node (-> Label (U #f Node) (Listof Node) (U #f Node) Node)) (set-node-children! (-> Node (Listof Node) Void)) (set-node-up-label! (-> Node Label Void)) (set-node-parent! (-> Node Node Void)) (set-node-suffix-link! (-> Node Node Void)) (#:struct suffix-tree ((root : Node))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lcs.rkt") (c require/typed/check c (u . "label.rkt") q (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-source-eq? (-> Label Label Boolean)) (label-length (-> Label Index)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (label-ref (-> Label Integer (U Symbol Char))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lcs.rkt") (c require/typed/check c (u . "structs.rkt") q (make-tree (-> Tree)) (tree-root (-> Tree Node)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs.rkt") (c require/typed/check c (u . "label.rkt") q (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-element-equal? (-> Any Any Boolean)) (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))) (label-copy (-> Label Label)) (label-ref-at-end? (-> Label Integer Boolean)) (label->string (-> Label String)) (label-source-eq? (-> Label Label Boolean)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (vector->label/with-sentinel (-> (Vectorof Char) Label)) (label-same-source? (-> Label Label Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/structs.rkt") (c require/typed/check c (u . "label.rkt") q (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (label-element-equal? (-> Any Any Boolean)) (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))) (label-copy (-> Label Label)) (label-ref-at-end? (-> Label Integer Boolean)) (label->string (-> Label String)) (label-source-eq? (-> Label Label Boolean)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (vector->label/with-sentinel (-> (Vectorof Char) Label)) (label-same-source? (-> Label Label Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/lcs.rkt") (c require/typed/check c (u . "ukkonen.rkt") q (tree-add! (-> Tree Label Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "label.rkt") q (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (label-element-equal? (-> Any Any Boolean)) (label-source-eq? (-> Label Label Boolean)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "structs.rkt") q (new-suffix-tree (-> Tree)) (node-find-child (-> Node Any (U Node #f))) (node-root? (-> Node Boolean)) (node-position-at-end? (-> Node Index Boolean)) (node-add-leaf! (-> Node Label Node)) (node-up-splice-leaf! (-> Node Index Label (values Node Node))) (node-follow/k (-> Node Label (-> Node (Pairof Node Index)) (-> Node Index (Pairof Node Index)) (-> Node Label Index (Pairof Node Index)) (-> Node Index Label Index (Pairof Node Index)) (Pairof Node Index))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "label.rkt") q (label-length (-> Label Index)) (label-ref (-> Label Integer (U Symbol Char))) (label->string (-> Label String)) (string->label (-> String Label)) (string->label/with-sentinel (-> String Label)) (label-element-equal? (-> Any Any Boolean)) (label-source-eq? (-> Label Label Boolean)) (vector->label (-> (Vectorof (U Char Symbol)) Label)) (make-label (-> (U String (Vectorof (U Char Symbol))) Label)) (sublabel (case-> (-> Label Index Label) (-> Label Index Index Label))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/ukkonen.rkt") (c require/typed/check c (u . "structs.rkt") q (new-suffix-tree (-> Tree)) (node-find-child (-> Node Any (U Node #f))) (node-root? (-> Node Boolean)) (node-position-at-end? (-> Node Index Boolean)) (node-add-leaf! (-> Node Label Node)) (node-up-splice-leaf! (-> Node Index Label (values Node Node))) (node-follow/k (-> Node Label (-> Node (Pairof Node Index)) (-> Node Index (Pairof Node Index)) (-> Node Label Index (Pairof Node Index)) (-> Node Index Label Index (Pairof Node Index)) (Pairof Node Index)))))) c (c synth c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/typed-data.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct Array ((shape : Indexes) (size : Integer) (strict? : (Boxof Boolean)) (strict! : (-> Void)) (unsafe-proc : (-> Indexes Float)))) (#:struct (Settable-Array Array) ((set-proc : (Indexes Float -> Void)))) (#:struct (Mutable-Array Settable-Array) ((data : (Vectorof Float)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "sequencer.rkt") q (note (-> Symbol Natural Natural (Pairof Natural Natural))) (sequence (-> Natural (Listof (Pairof (U Natural #f) Natural)) Natural (-> Float (-> Indexes Float)) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "array-struct.rkt") q (build-array (-> Indexes (-> Indexes Flonum) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "array-transform.rkt") q (array-append* ((Listof Array) -> Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-default-strict! (-> Array Void)) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (-> (Listof Indexes) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-vector-remove (-> Indexes Integer Indexes)) (vector-copy-all (-> Indexes Indexes)) (unsafe-vector-insert (-> Indexes Integer Integer Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-default-strict! (-> Array Void)) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (-> (Listof Indexes) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-vector-remove (-> Indexes Integer Indexes)) (vector-copy-all (-> Indexes Indexes)) (unsafe-vector-insert (-> Indexes Integer Integer Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "synth.rkt") q (fs Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-utils.rkt") q (next-indexes! (-> Indexes Integer Indexes Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-size (-> Array Integer)) (array-strictness (Parameterof (U #f #t))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-utils.rkt") q (next-indexes! (-> Indexes Integer Indexes Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-size (-> Array Integer)) (array-strictness (Parameterof (U #f #t))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "mixer.rkt") q (mix (-> Weighted-Signal * Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (array-default-strict! (-> Array Void)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (case-> ((Listof Indexes) -> Indexes) ((Listof Indexes) (U #f #t (quote permissive)) -> Indexes))) (array-broadcasting (Parameterof (U #f #t (quote permissive)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (array-default-strict! (-> Array Void)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (case-> ((Listof Indexes) -> Indexes) ((Listof Indexes) (U #f #t (quote permissive)) -> Indexes))) (array-broadcasting (Parameterof (U #f #t (quote permissive)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "array-struct.rkt") q (build-array (-> Indexes (-> Indexes Flonum) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-struct.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-array-index->value-index (-> Indexes Indexes Integer)) (check-array-shape-size (-> Symbol Indexes Integer)) (check-array-shape (-> (Vectorof Integer) (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "array-transform.rkt") q (array-append* ((Listof Array) -> Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-default-strict! (-> Array Void)) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (-> (Listof Indexes) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-vector-remove (-> Indexes Integer Indexes)) (vector-copy-all (-> Indexes Indexes)) (unsafe-vector-insert (-> Indexes Integer Integer Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-default-strict! (-> Array Void)) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (-> (Listof Indexes) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-strict? (-> Array Boolean)) (array-default-strict! (-> Array Void)) (array-shape (-> Array Indexes)) (array-size (-> Array Integer)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-broadcast.rkt") (c require/typed/check c (u . "array-utils.rkt") q (make-thread-local-indexes (-> Integer (-> Indexes))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/array-transform.rkt") (c require/typed/check c (u . "array-utils.rkt") q (unsafe-vector-remove (-> Indexes Integer Indexes)) (vector-copy-all (-> Indexes Indexes)) (unsafe-vector-insert (-> Indexes Integer Integer Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "synth.rkt") q (fs Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-utils.rkt") q (next-indexes! (-> Indexes Integer Indexes Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-size (-> Array Integer)) (array-strictness (Parameterof (U #f #t))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-utils.rkt") q (next-indexes! (-> Indexes Integer Indexes Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/synth.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (unsafe-array-proc (-> Array (-> Indexes Float))) (array-size (-> Array Integer)) (array-strictness (Parameterof (U #f #t))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/sequencer.rkt") (c require/typed/check c (u . "mixer.rkt") q (mix (-> Weighted-Signal * Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (array-default-strict! (-> Array Void)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (case-> ((Listof Indexes) -> Indexes) ((Listof Indexes) (U #f #t (quote permissive)) -> Indexes))) (array-broadcasting (Parameterof (U #f #t (quote permissive)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array? (-> Array Boolean)) (array-shape (-> Array Indexes)) (array-default-strict! (-> Array Void)) (unsafe-array-proc (-> Array (-> Indexes Float))) (unsafe-build-array (-> Indexes (-> Indexes Float) Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/mixer.rkt") (c require/typed/check c (u . "array-broadcast.rkt") q (array-broadcast (-> Array Indexes Array)) (array-shape-broadcast (case-> ((Listof Indexes) -> Indexes) ((Listof Indexes) (U #f #t (quote permissive)) -> Indexes))) (array-broadcasting (Parameterof (U #f #t (quote permissive)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "drum.rkt") q (drum (-> Natural Pattern Natural Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-size (-> Array Integer)) (make-array (-> In-Indexes Flonum Array)) (build-array (-> In-Indexes (-> Indexes Float) Array)) (unsafe-vector->array (-> Indexes (Vectorof Float) Mutable-Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "array-utils.rkt") q (array-shape-size (-> Indexes Integer)) (check-array-shape (-> In-Indexes (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "array-transform.rkt") q (array-append* ((Listof Array) -> Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "synth.rkt") q (fs Natural) (seconds->samples (-> Float Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "array-struct.rkt") q (array-size (-> Array Integer)) (make-array (-> In-Indexes Flonum Array)) (build-array (-> In-Indexes (-> Indexes Float) Array)) (unsafe-vector->array (-> Indexes (Vectorof Float) Mutable-Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "array-utils.rkt") q (array-shape-size (-> Indexes Integer)) (check-array-shape (-> In-Indexes (-> Nothing) Indexes)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "array-transform.rkt") q (array-append* ((Listof Array) -> Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/drum.rkt") (c require/typed/check c (u . "synth.rkt") q (fs Natural) (seconds->samples (-> Float Integer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "mixer.rkt") q (mix (-> Weighted-Signal * Array)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "synth.rkt") q (emit (-> Array (Vectorof Integer))) (sawtooth-wave (-> Float (-> Indexes Float)))))) c (c take5 c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/card-adapted.rkt") (c require/typed/check c (u . "card.rkt") q (#:struct card ((face : Face) (bulls : Bulls))) (>-face (-> Card Card Boolean)) (--face (-> Card Card Natural)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "player.rkt") q (create-player (-> Natural Player)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "dealer.rkt") q (create-dealer (-> (Listof Player) Dealer)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (FIVE Natural) (STACKS Natural) (SIXTYSIX Natural) (HAND Natural) (MIN-BULL Bulls) (MAX-BULL Bulls) (configuration (-> (Listof (List Symbol Natural)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "card-pool.rkt") q (create-card-pool (-> (-> (Listof Card) (Listof Card)) (-> Bulls) CardPool)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/card-pool.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (HAND Natural) (MIN-BULL Natural) (MAX-BULL Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/card-pool.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (HAND Natural) (MIN-BULL Natural) (MAX-BULL Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "deck.rkt") q (create-deck (-> CardPool Deck)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (STACKS Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "stack.rkt") q (bulls (-> Stack Natural)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (STACKS Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "stack.rkt") q (bulls (-> Stack Natural)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "player.rkt") q (player% Player%))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (FIVE Natural) (STACKS Natural) (SIXTYSIX Natural) (HAND Natural) (MIN-BULL Bulls) (MAX-BULL Bulls) (configuration (-> (Listof (List Symbol Natural)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "card-pool.rkt") q (create-card-pool (-> (-> (Listof Card) (Listof Card)) (-> Bulls) CardPool)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/card-pool.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (HAND Natural) (MIN-BULL Natural) (MAX-BULL Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/card-pool.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (HAND Natural) (MIN-BULL Natural) (MAX-BULL Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "deck.rkt") q (create-deck (-> CardPool Deck)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (STACKS Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "stack.rkt") q (bulls (-> Stack Natural)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "basics.rkt") q (FACE Natural) (STACKS Natural))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/deck.rkt") (c require/typed/check c (u . "stack.rkt") q (bulls (-> Stack Natural)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/dealer.rkt") (c require/typed/check c (u . "player.rkt") q (player% Player%)))) c (c tetris c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/base-types.rkt") (c require/typed/check c (u . "data.rkt") q (#:struct posn ((x : Real) (y : Real))) (#:struct block ((x : Real) (y : Real) (color : Color))) (#:struct tetra ((center : posn) (blocks : (Listof Block)))) (#:struct world ((tetra : tetra) (blocks : (Listof Block)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "aux.rkt") q (list-pick-random (-> (Listof Tetra) Tetra)) (tetras (Listof Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/aux.rkt") (c require/typed/check c (u . "tetras.rkt") q (build-tetra-blocks (-> Color Real Real Real Real Real Real Real Real Real Real Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/tetras.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-intersect (-> BSet BSet BSet)) (blocks-move (-> Real Real BSet BSet)) (blocks-rotate-cw (-> Posn BSet BSet)) (blocks-rotate-ccw (-> Posn BSet BSet)) (blocks-change-color (-> BSet Color BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "block.rkt") q (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "consts.rkt") q (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "block.rkt") q (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "consts.rkt") q (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/tetras.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-intersect (-> BSet BSet BSet)) (blocks-move (-> Real Real BSet BSet)) (blocks-rotate-cw (-> Posn BSet BSet)) (blocks-rotate-ccw (-> Posn BSet BSet)) (blocks-change-color (-> BSet Color BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "block.rkt") q (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "consts.rkt") q (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "block.rkt") q (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "consts.rkt") q (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/aux.rkt") (c require/typed/check c (u . "tetras.rkt") q (build-tetra-blocks (-> Color Real Real Real Real Real Real Real Real Real Real Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/tetras.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-intersect (-> BSet BSet BSet)) (blocks-move (-> Real Real BSet BSet)) (blocks-rotate-cw (-> Posn BSet BSet)) (blocks-rotate-ccw (-> Posn BSet BSet)) (blocks-change-color (-> BSet Color BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "block.rkt") q (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "consts.rkt") q (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "block.rkt") q (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "consts.rkt") q (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/tetras.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-intersect (-> BSet BSet BSet)) (blocks-move (-> Real Real BSet BSet)) (blocks-rotate-cw (-> Posn BSet BSet)) (blocks-rotate-ccw (-> Posn BSet BSet)) (blocks-change-color (-> BSet Color BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "block.rkt") q (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "consts.rkt") q (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "block.rkt") q (block-rotate-ccw (-> Posn Block Block)) (block-rotate-cw (-> Posn Block Block)) (block=? (-> Block Block Boolean)) (block-move (-> Real Real Block Block)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/block.rkt") (c require/typed/check c (u . "data.rkt") q (posn=? (-> Posn Posn Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/bset.rkt") (c require/typed/check c (u . "consts.rkt") q (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-overflow? (-> BSet Boolean)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "world.rkt") q (world-key-move (-> World String World)) (next-world (-> World World)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-union (-> BSet BSet BSet)) (blocks-max-x (-> BSet Real)) (blocks-min-x (-> BSet Real)) (blocks-max-y (-> BSet Real)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "tetras.rkt") q (tetra-move (-> Real Real Tetra Tetra)) (tetra-rotate-ccw (-> Tetra Tetra)) (tetra-rotate-cw (-> Tetra Tetra)) (tetra-overlaps-blocks? (-> Tetra BSet Boolean)) (tetra-change-color (-> Tetra Color Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "aux.rkt") q (list-pick-random (-> (Listof Tetra) Tetra)) (neg-1 Negative-Fixnum) (tetras (Listof Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "elim.rkt") q (eliminate-full-rows (-> BSet BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-move (-> Real Real BSet BSet)) (full-row? (-> BSet Natural Boolean)) (blocks-union (-> BSet BSet BSet)) (blocks-row (-> BSet Real BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "consts.rkt") q (board-height Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-move (-> Real Real BSet BSet)) (full-row? (-> BSet Natural Boolean)) (blocks-union (-> BSet BSet BSet)) (blocks-row (-> BSet Real BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "consts.rkt") q (board-height Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "consts.rkt") q (board-height Integer) (board-width Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-union (-> BSet BSet BSet)) (blocks-max-x (-> BSet Real)) (blocks-min-x (-> BSet Real)) (blocks-max-y (-> BSet Real)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "tetras.rkt") q (tetra-move (-> Real Real Tetra Tetra)) (tetra-rotate-ccw (-> Tetra Tetra)) (tetra-rotate-cw (-> Tetra Tetra)) (tetra-overlaps-blocks? (-> Tetra BSet Boolean)) (tetra-change-color (-> Tetra Color Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "aux.rkt") q (list-pick-random (-> (Listof Tetra) Tetra)) (neg-1 Negative-Fixnum) (tetras (Listof Tetra)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "elim.rkt") q (eliminate-full-rows (-> BSet BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-move (-> Real Real BSet BSet)) (full-row? (-> BSet Natural Boolean)) (blocks-union (-> BSet BSet BSet)) (blocks-row (-> BSet Real BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "consts.rkt") q (board-height Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "bset.rkt") q (blocks-move (-> Real Real BSet BSet)) (full-row? (-> BSet Natural Boolean)) (blocks-union (-> BSet BSet BSet)) (blocks-row (-> BSet Real BSet)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/elim.rkt") (c require/typed/check c (u . "consts.rkt") q (board-height Integer))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/world.rkt") (c require/typed/check c (u . "consts.rkt") q (board-height Integer) (board-width Integer)))) c (c zombie c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/image-adapted.rkt") (c require/typed/check c (u . "image.rkt") q (#:struct image ((impl : Any))) (empty-scene (-> Real Real Image)) (place-image (-> Image Real Real Image Image)) (circle (-> Real String String Image)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "zombie.rkt") q (w0 World) (world-on-mouse (-> World (-> Real Real String World))) (world-on-tick (-> World (-> World))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zombie.rkt") (c require/typed/check c (u . "math.rkt") q (min (-> Real Real Real)) (max (-> Real Real Real)) (abs (-> Real Real)) (sqr (-> Real Real)) (msqrt (-> Real Real)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zombie.rkt") (c require/typed/check c (u . "math.rkt") q (min (-> Real Real Real)) (max (-> Real Real Real)) (abs (-> Real Real)) (sqr (-> Real Real)) (msqrt (-> Real Real))))) c (c zordoz c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/main.rkt") (c require/typed/check c (u . "zo-shell.rkt") q (zo-read (-> Path-String zo)) (init (-> (Vector zo String) Void)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-shell.rkt") (c require/typed/check c (u . "zo-string.rkt") q (zo->spec (-> zo Spec)) (zo->string (->* (zo) (#:deep? Boolean) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-shell.rkt") (c require/typed/check c (u . "zo-transition.rkt") q (zo-transition (-> zo String (values (U zo (Listof zo)) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-shell.rkt") (c require/typed/check c (u . "zo-find.rkt") q (zo-find (-> zo String (#:limit (U Natural #f)) (Listof result))) (#:struct result ((zo : zo) (path : (Listof zo)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-transition.rkt") q (zo-transition (-> zo String (values (U zo (Listof zo)) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-string.rkt") q (zo->spec (-> zo Spec)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-transition.rkt") q (zo-transition (-> zo String (values (U zo (Listof zo)) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-string.rkt") q (zo->spec (-> zo Spec)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-shell.rkt") (c require/typed/check c (u . "zo-string.rkt") q (zo->spec (-> zo Spec)) (zo->string (->* (zo) (#:deep? Boolean) String)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-shell.rkt") (c require/typed/check c (u . "zo-transition.rkt") q (zo-transition (-> zo String (values (U zo (Listof zo)) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-shell.rkt") (c require/typed/check c (u . "zo-find.rkt") q (zo-find (-> zo String (#:limit (U Natural #f)) (Listof result))) (#:struct result ((zo : zo) (path : (Listof zo)))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-transition.rkt") q (zo-transition (-> zo String (values (U zo (Listof zo)) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-string.rkt") q (zo->spec (-> zo Spec)))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-transition.rkt") q (zo-transition (-> zo String (values (U zo (Listof zo)) Boolean))))) c (f require-typed-check-info (u . "/Users/ben/code/racket/my-pkgs/gtp-benchmarks/scribblings/cache/staging/configuration/zo-find.rkt") (c require/typed/check c (u . "zo-string.rkt") q (zo->spec (-> zo Spec)))))))
